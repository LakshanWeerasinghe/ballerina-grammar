# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Ballerina
scopeName: source.ballerina
fileTypes: [bal]
uuid: c01f5512-489a-41bd-ba5d-caf4b55ae3b3

#keywords
#string / string template / xml template
#number
#comments
#mdDocumentation

variables:
  identifier: "[_$[:alpha:]][_$[:alnum:]]*"
  letter: "[^ (){}\\[\\]\\-?*=><?;\"',.\\s\\\\]"
  nonLetter: "[ (){}\\[\\]\\-?*=><?;\"',.\\s]"
  startOfIdentifier: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))
  endOfIdentifier: (?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
  matchingParenthesis: (\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))
  constructsAndModifiers: '(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|service|type|var)\b'
  endOfStatement: ';|^\s*$|(?:^\s*{{constructsAndModifiers}})'
  lookAheadEndOfType: '[;),}\]:?\-\+\>]|\|\||\&\&|\!\=\=|$'
  varExprStart: '\b(string|int|boolean|var)'
  nonPropertyLookBehind: '[^\._$[:alnum:]]'
  lookBehindString: '^string|{{nonPropertyLookBehind}}string'
  lookBehindInt: '^int|{{nonPropertyLookBehind}}int'
  propertyAccess: (?:(\.)|(\?\.(?!\s*[[:digit:]])))
  propertyAccessPreIdentifier: \??\.\s*
  propertyIdentifier: '\#?{{identifier}}'
  possiblyMultilineTypeArgument: (<\s*[\{\[\(]\s*$)
  functionCallLookup: \s*(?:(\?\.\s*)|(\!))?(({{typeArguments}}\s*)?\()
  functionCallNamedTarget: (({{identifier}})(\s*{{propertyAccessPreIdentifier}}({{propertyIdentifier}}))*)|({{propertyAccessPreIdentifier}}{{propertyIdentifier}})
  functionCallTarget: (({{functionCallNamedTarget}})|(?<=[\)]))

monarchVariables:
  typeScope: 'type'
  annotationScope: 'type'
  numberScope: 'number'
  xmlTagAngle: 'tag'
  xmlAttribute: 'variable.parameter'
  xmlTag: 'tag'

tmlVariables:
  typeScope: 'storage.type.ballerina'
  annotationScope: 'storage.type.annotation.ballerina'
  numberScope: 'constant.numeric.decimal.ballerina'
  xmlTagAngle: 'punctuation.definition.tag.begin.xml.ballerina'
  xmlAttribute: 'entity.other.attribute-name.xml.ballerina'
  xmlTag: 'entity.name.tag.xml.ballerina'

patterns:
- include: '#statements'

repository:
  statements:
    patterns:
    - include: '#stringTemplate'
    - include: '#declaration'
    - include: '#control-statement'
    - include: '#expression'
    - include: '#punctuation-semicolon'
    - include: '#string'
    - include: '#comment'

  declaration:
    patterns:
    - include: '#import-declaration'
    - include: '#var-expr'
    - include: '#typeDefinition'
    - include: '#function-defn'
    - include: '#service-decl'
    - include: '#class-defn'

  control-statement:
    patterns:
    - begin: '{{startOfIdentifier}}(return){{endOfIdentifier}}'
      beginCaptures:
        '0': { name: keyword.control.flow.ballerina }
      end: (?=[;}]|$|{{endOfStatement}})
      patterns:
      - include: '#expression'
    - include: '#if-statement'
    - name: keyword.control.conditional.ballerina
      match: '{{startOfIdentifier}}(else|if){{endOfIdentifier}}'

  expression:
    patterns:
    - include: '#expressionWithoutIdentifiers'
    - include: '#identifiers'

  expressionWithoutIdentifiers:
    patterns: 
    - include: '#string'
    - include: '#stringTemplate'
    - include: '#comment'
    #- include: '#object-literal'
    - include: '#expression-operators'
    - include: '#literal'

  object-literal:
    name: meta.objectliteral.ballerina
    begin: \{
    beginCaptures:
      '0': { name: punctuation.definition.block.ballerina }
    end: \}
    endCaptures:
      '0': { name: punctuation.definition.block.ballerina }
    patterns:
    - include: '#object-member'

  import-declaration:
    name: meta.import.ballerina
    begin: '\bimport\b'
    beginCaptures:
      '0': { name: keyword.control.import.ballerina }
    end: \;
    endCaptures: 
      '0': { name: punctuation.terminator.statement.ballerina }
    patterns:
    - include: '#comment'
    - include: '#import-clause'

  identifiers:
    patterns:
    - match: |-
        (?x)(?:{{propertyAccess}}\s*)?({{identifier}})(?=\s*={{functionOrArrowLookup}})
      captures:
        '1': { name: punctuation.accessor.ballerina }
        '2': { name: punctuation.accessor.optional.ballerina }
        '3': { name: entity.name.function.ballerina }
    # properties
    - match: '{{propertyAccess}}\s*(\#?{{identifier}})'
      captures:
        '1': { name: punctuation.accessor.ballerina }
        '2': { name: punctuation.accessor.optional.ballerina }
        '3': { name: variable.other.property.ballerina }
    # vars
    - name: variable.other.readwrite.ballerina
      match: '{{identifier}}'

  object-member:
    patterns:
    - include: '#comment'
    - name: meta.object.member.ballerina meta.object-literal.key.ballerina
      begin: (?=\[)
      end: (?=:)|((?<=[\]])(?=\s*[\(\<]))
      patterns:
      - include: '#comment'
    - name: meta.object.member.ballerina meta.object-literal.key.ballerina
      begin: (?=[\'\"\`])
      end: (?=:)|((?<=[\'\"\`])(?=((\s*[\(\<,}])|(\s+(as)\s+))))
      patterns:
      - include: '#comment'
      - include: '#string'
    - name: meta.object.member.ballerina meta.object-literal.key.ballerina
      begin: (?x)(?={{anyNumber}})
      end: (?=:)|(?=\s*([\(\<,}])|(\s+as\s+))
      patterns:
      - include: '#comment'
      - include: '#numbers'
    - name: meta.method.declaration.ballerina
      begin: (?<=[\]\'\"\`])(?=\s*[\(\<])
      end: (?=\}|;|,)|(?<=\})
      patterns:
      - include: '#function-body'
    - name: meta.object.member.ballerina
      match: (?![_$[:alpha:]])([[:digit:]]+)\s*(?=({{inlineComment}}\s*)*:)
      captures:
        '0': { name: meta.object-literal.key.ballerina }
        '1': { name: constant.numeric.decimal.ballerina }
    - name: meta.object.member.ballerina
      match: |-
        (?x)(?:({{identifier}})\s*(?=({{inlineComment}}\s*)*:(\s*{{inlineComment}})*{{functionOrArrowLookup}}))
      captures:
        '0': { name: meta.object-literal.key.ballerina }
        '1': { name: entity.name.function.ballerina }
    - name: meta.object.member.ballerina
      match: (?:{{identifier}})\s*(?=({{inlineComment}}\s*)*:)
      captures:
        '0': { name: meta.object-literal.key.ballerina }
    - name: meta.object.member.ballerina
      begin: \.\.\.
      beginCaptures:
        '0': { name: keyword.operator.spread.ballerina }
      end: (?=,|\})
      patterns:
      - include: '#expression'
    - name: meta.object.member.ballerina
      match: ({{identifier}})\s*(?=,|\}|$|\/\/|\/\*)
      captures:
        '1': { name: variable.other.readwrite.ballerina }
    - name: meta.object.member.ballerina
      match: '{{startOfIdentifier}}(as)\s+(const)(?=\s*([,}]|$))'
      captures:
        '1': { name: keyword.control.as.ballerina }
        '2': { name: storage.modifier.ballerina }
    - name: meta.object.member.ballerina
      begin: '{{startOfIdentifier}}(as)\s+'
      beginCaptures:
        '1': { name: keyword.control.as.ballerina }
      end: (?={{lookAheadEndOfType}}|^|({{startOfIdentifier}}(as)\s+))
    - name: meta.object.member.ballerina
      begin: (?={{identifier}}\s*=)
      end: (?=,|\}|$|\/\/|\/\*)
      patterns:
      - include: '#expression'

  #expression operators
  expression-operators:
    patterns:
    - name: keyword.operator.assignment.compound.ballerina
      match: \*=|(?<!\()/=|%=|\+=|\-=
    - name: keyword.operator.assignment.compound.bitwise.ballerina
      match: \&=|\^=|<<=|>>=|>>>=|\|=
    - name: keyword.operator.bitwise.shift.ballerina
      match: <<|>>>|>>
    - name: keyword.operator.comparison.ballerina
      match: ===|!==|==|!=
    - name: keyword.operator.relational.ballerina
      match: <=|>=|<>|<|>
    - match: (?<=[_$[:alnum:]])(\!)\s*(?:(/=)|(?:(/)(?![/*])))
      captures:
        '1': { name: keyword.operator.logical.ballerina }
        '2': { name: keyword.operator.assignment.compound.ballerina }
        '3': { name: keyword.operator.arithmetic.ballerina }
    - name: keyword.operator.logical.ballerina
      match: \!|&&|\|\||\?\?
    - name: keyword.operator.bitwise.ballerina
      match: \&|~|\^|\|
    - name: keyword.operator.assignment.ballerina
      match: \=
    - name: keyword.operator.decrement.ballerina
      match: --
    - name: keyword.operator.increment.ballerina
      match: \+\+
    - name: keyword.operator.arithmetic.ballerina
      match: '%|\*|/|-|\+'

  #punctuations
  punctuation-comma:
    patterns:
    - name: punctuation.separator.comma.ballerina
      match: ','

  punctuation-semicolon:
    patterns:
    - match: ';'
      name: punctuation.terminator.statement.ballerina

  punctuation-accessor:
    patterns:
      match: '{{propertyAccess}}'
      captures:
        '1': { name: punctuation.accessor.ballerina }
        '2': { name: punctuation.accessor.optional.ballerina }

  annotationAttachment:
    patterns:
    - match: '@((?:{{identifier}}):)?(?:{{identifier}})'
      name: '{{annotationScope}}'

  annotationDefinition:
    patterns:
    - begin: '\bannotation\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: ';'
      patterns:
      - include: '#code'

  booleans:
    patterns:
    - match: '\b(true|false)\b'
      name: constant.language.boolean.ballerina

  butExp:
    patterns:
    - begin: '\bbut\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}'
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      patterns:
      - include: '#butExpBody'
      - include: '#comment'

  butExpBody:
    patterns:
    - begin: \{
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      end: '(?=\})'
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      patterns:
      - include: '#parameter'
      - include: '#butClause'
      - include: '#comment'

  butClause:
    patterns:
    - begin: '=>'
      beginCaptures:
        '0': { name:  keyword.operator.ballerina }
      end: ',|(?=\})'
      patterns:
      - include: '#code'

  call:
    patterns:
    - match: ({{identifier}})\s*(?=\()
      name: entity.name.function.ballerina

  comment:
    patterns:
    - name: comment.ballerina
      match: \/\/.*

  constrainType:
    patterns:
    - begin: '<'
      end: '>'
      beginCaptures:
        '0': { name: punctuation.definition.parameters.begin.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.parameters.end.ballerina }
      patterns:
      - include: '#comment'
      - include: '#constrainType'
      - name: '{{typeScope}}'
        match: \b({{identifier}})\b

  tupleType:
    patterns:
    - begin: '\['
      end: '(?=\]|;)'
      patterns:
      - include: '#comment'
      - include: '#constrainType'
      - include: '#paranthesisedBracket'
      - name: '{{typeScope}}'
        match: \b({{identifier}})\b

  #blocks
  decl-block:
    name: meta.block.ballerina
    begin: \{
    beginCaptures:
      '0': { name: punctuation.definition.block.ballerina }
    end: (?=\} external;|\})
    endCaptures:
      '0': { name: punctuation.definition.block.ballerina }
    patterns:
    - include: '#statements'

  defaultValue:
    patterns:
    - begin: '[=:]'
      beginCaptures:
        '0': { name:  keyword.operator.ballerina }
      end: (?=[,)])
      patterns:
        - include: '#code'

  documentationDef:
    patterns:
    - begin: \b(?:documentation|deprecated)\b
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}'
      endCaptures:
        '0': { name: delimiter.curly }
      patterns:
      - include: '#documentationBody'
      - include: '#comment'
  
  documentationBody:
    patterns:
    - begin: \{
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      end: '(?=\})'
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      patterns:
      - match: (P|R|T|F|V)({{)(.*)(}})
        captures:
          '1': {name: keyword.other.ballerina.documentation}
          '2': {name: keyword.other.ballerina.documentation}
          '3': {name: variable.parameter.ballerina.documentation}
          '4': {name: keyword.other.ballerina.documentation}

      - name: comment.block.code.ballerina.documentation
        begin: \```
        end: \```

      - name: comment.block.code.ballerina.documentation
        begin: \``
        end: \``

      - name: comment.block.code.ballerina.documentation
        begin: \`
        end: \`

      - name: comment.block.ballerina.documentation
        match: .

  errorDestructure:
    patterns:
    - begin: 'error'
      end: '(?==>)'
      beginCaptures:
        '0': { name: '{{typeScope}}' }
      patterns:
      - include: '#code'

  callableUnitBody:
    patterns:
    - begin: '\{'
      end: '(?=\})'
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns:
      - include: '#workerDef'
      - include: '#service-decl'
      - include: '#objectDec'
      - include: '#function-defn'
      - include: '#forkStatement'
      - include: '#code'

  forkBody:
    patterns: 
    - begin: '\{'
      end: '(?=\})'
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns: 
      - include: '#workerDef'

  forkStatement:
    patterns: 
    - begin: '\bfork\b'
      end: '\}'
      beginCaptures:
        '0': { name: keyword.control.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns:
      - include: '#forkBody'

  function-body:
    patterns:
    - include: '#comment'
    - include: '#functionParameters'
    - include: '#decl-block'
    - begin: \=>
      name: meta.block.ballerina
      beginCaptures:
        '0': { name: meta.arrow.ballerina storage.type.function.arrow.ballerina }
      end: \;
      patterns:
      - include: '#statements'
    - name: keyword.generator.asterisk.ballerina
      match: \*

  function-defn:
    name: meta.function.ballerina
    begin: '(?:(public|private)\s+)?(function\b)'
    beginCaptures:
      '1': { name: storage.modifier.ballerina } 
      '2': { name: storage.type.function.ballerina }
    end: (?<=\;)|(?<=\})
    patterns:
    - match: \bexternal\b
      name: keyword.ballerina
    - include: '#functionReturns'
    - include: '#functionName'
    - include: '#punctuation-semicolon'
    - include: '#function-body'

  functionName:
    patterns:
    - name: meta.definition.function.ballerina entity.name.function.ballerina
      match: '{{identifier}}'

  functionParameters:
    name: meta.parameters.ballerina
    begin: '\(|\['
    end: '\)|\]'
    beginCaptures:
      '0': { name: punctuation.definition.parameters.begin.ballerina }
    endCaptures:
      '0': { name: punctuation.definition.parameters.begin.ballerina }
    patterns:
    - include: '#function-parameters-body'

  function-parameters-body:
    patterns:
    - include: '#annotationAttachment'
    - include: '#recordLiteral'
    - include: '#parameter'
    - include: '#parameterTuple'
    - include: '#defaultValue'
    - include: '#comment'
    - include: '#variable-initializer'
    - name: punctuation.separator.parameter.ballerina
      match: ','

  functionReturns:
    patterns:
    - begin: '(?<=\))\s*(returns)\s*({{identifier}})'
      beginCaptures:
        '1': { name: meta.type.function.return.ballerina }
        '2': { name: meta.return.type.ballerina support.type.primitive.ballerina}
      end: (?=\{|;|,|=)
      endCaptures:
        '0': { name: curly }

  functionType:
    patterns:
    - begin: '\bfunction\b'
      beginCaptures:
        '0': { name: keyword.ballerina }
      end: (?=\,)|(?=\|)|(?=\:)|(?==>)|(?=\))|(?=\])
      patterns:
      - include: '#comment'
      - include: '#functionTypeParamList'
      - include: '#functionTypeReturns'

  functionTypeParamList:
    patterns:
    - begin: '\('
      end: '\)'
      beginCaptures:
        '0': { name: delimiter.parenthesis }
      endCaptures:
        '0': { name: delimiter.parenthesis }
      patterns:
      - match: public
        name: keyword
      - include: '#annotationAttachment'
      - include: '#recordLiteral'
      - include: '#record'
      - include: '#objectDec'
      - include: '#functionType'
      - include: '#constrainType'
      - include: '#parameterTuple'
      - include: '#functionTypeType'
      - include: '#comment'

  functionTypeType:
    patterns:
    - begin: '{{identifier}}'
      beginCaptures:
        '0': { name: '{{typeScope}}' }
      end: (?=\,)|(?:\|)|(?=\])|(?=\))

  functionTypeReturns:
    patterns:
    - begin: '\breturns\b'
      beginCaptures:
        '0': { name: 'keyword' }
      end: (?=\,)|(?:\|)|(?=\])|(?=\))
      patterns:
      - include: '#functionTypeReturnsParameter'
      - include: '#comment'

  functionTypeReturnsParameter:
    patterns:
    - begin: ((?=record|object|function)|(?:{{identifier}}))
      beginCaptures:
        '0': { name: '{{typeScope}}' }
      end: (?=\,)|(?:\|)|(?:\:)|(?==>)|(?=\))|(?=\])
      patterns:
      - include: '#record'
      - include: '#objectDec'
      - include: '#functionType'
      - include: '#constrainType'
      - include: '#defaultValue'
      - include: '#comment'
      - include: '#parameterTuple'
      - match: '{{identifier}}'
        name: default.variable.parameter.ballerina

  if-statement:
    patterns:
    - begin: '{{startOfIdentifier}}(?=\bif\b\s*(?!\{))'
      end: (?<=\})
      patterns:
      - include: '#comment'
      - begin: '{{startOfIdentifier}}(if)\s*(\()?'
        beginCaptures:
          '1': { name: keyword.control.conditional.ballerina }
          '2': { name: meta.brace.round.ballerina }
        end: (\))|(\s(?=\S)(?=\s*{))
        endCaptures:
          '0': { name: meta.brace.round.ballerina }
        patterns:
        - name: keyword.operator.expression.is.ballerina
          match: '{{startOfIdentifier}}is{{endOfIdentifier}}'
        - include: '#expression'  
      - include: '#decl-block'

  import-clause:
    patterns:
    - include: '#comment'
    - match: '{{startOfIdentifier}}(?:(\bdefault)|(\*)|(\b{{identifier}}))'
      captures:
        '1': { name: keyword.control.default.ballerina }
        '3': { name: variable.other.readwrite.ballerina meta.import.module.ballerina }
        '5': { name: keyword.control.default.ballerina }
        '6': { name: variable.other.readwrite.alias.ballerina }
    - name: variable.other.readwrite.alias.ballerina
      match: ({{identifier}})  
      
  maps:
    patterns:
    - begin: \{
      end: \}
      patterns:
      - include: '#code'

  matchStatementPatternClause:
    patterns:
    - begin: '=>'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '((\})|;|,)'
      patterns:
      - include: '#callableUnitBody'
      - include: '#code'

  matchStatement:
    patterns:
    - begin: '\bmatch\b'
      beginCaptures:
        '0': { name:  keyword.control.ballerina }
      end: '\}'
      patterns:
      - include: '#matchStatementBody'
      - include: '#comment'
      - include: '#code'

  matchStatementBody:
    patterns:
    - begin: \{
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      end: (?=\})
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      patterns:
      - include: '#literal'
      - include: '#matchBindingPattern'
      - include: '#matchStatementPatternClause'
      - include: '#comment'
      - include: '#code'

  matchBindingPattern:
    patterns:
    - begin: 'var'
      beginCaptures:
        '0': { name: '{{typeScope}}' }
      end: '(?==>)|,'
      patterns:
      - include: '#errorDestructure'
      - include: '#code'
      - match: '{{identifier}}'
        name: variable.parameter.ballerina

  mdDocumentation:
    patterns:
    - include: '#mdDocumentationReturnParamDescription'
    - include: '#mdDocumentationParamDescription'
    - match: '#.*'
      name: comment.mddocs.ballerina

  mdDocumentationParamDescription:
    patterns:
    - begin: '(#)(?: *?)(\+)(?: *)({{identifier}})?(?: *)(-)?(.*)'
      beginCaptures:
        '1': { name:  comment.mddocs.ballerina }
        '2': { name:  keyword.ballerina }
        '3': { name:  default.variable.parameter.ballerina }
        '4': { name:  keyword.ballerina }
        '5': { name:  comment.mddocs.paramdesc.ballerina }
      end: '(?=[^#\r\n]|(?:# *?\+))'
      patterns:
      - match: '#.*'
        name: comment.mddocs.paramdesc.ballerina

  mdDocumentationReturnParamDescription:
    patterns:
    - begin: '(#)(?: *?)(\+)(?: *)(return)(?: *)(-)?(.*)'
      beginCaptures:
        '1': { name:  comment.mddocs.ballerina }
        '2': { name:  keyword.ballerina }
        '3': { name:  keyword.ballerina }
        '4': { name:  keyword.ballerina }
        '5': { name:  comment.mddocs.returnparamdesc.ballerina }
      end: '(?=[^#\r\n]|(?:# *?\+))'
      patterns:
      - match: '#.*'
        name: comment.mddocs.returnparamdesc.ballerina

  multiType: 
    patterns: 
    - match: '(?<=\|)({{identifier}})|({{identifier}})(?=\|)'
      name: '{{typeScope}}'
    - match: \|
      name: keyword.operator.ballerina 

  numbers:
    patterns:
    - match: '\b0[xX][\da-f]+\b|\b\d+(?:\.(?:\d+|$))?'
      name: '{{numberScope}}'

  class-body:
    begin: \{
    beginCaptures:
      '0': { name: punctuation.definition.block.ballerina }
    end: \}
    endCaptures:
      '0': { name: punctuation.definition.block.ballerina }
    patterns:
    - include: '#comment'
    - include: '#mdDocumentation'
    - include: '#function-defn'
    - include: '#var-expr'
    - include: '#variable-initializer'
    - include: '#access-modifier'
    - include: '#keywords'
    - begin: (?<=:)\s*
      end: (?=\s|[;),}\]:\-\+]|{{endOfStatement}})
    - include: '#decl-block'

  access-modifier:
    patterns:
    - match: '{{startOfIdentifier}}(public|private){{endOfIdentifier}}'
      name: storage.modifier.ballerina
    
  class-defn:
    name: meta.class.ballerina
    begin: '(\s+)(class\b)|^class\b(?=\s+|/[/*])'
    beginCaptures:
      '0': { name: storage.modifier.ballerina storage.type.class.ballerina}
    end: (?<=\})
    patterns:
    - match: '{{identifier}}'
      captures:
        '0': { name: 'entity.name.type.class.ballerina' }    
    - include: '#class-body'    

  objectDec:
    patterns:
    - begin: '\bobject\b(?!:)'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}'
      endCaptures:
        '0': { name: delimiter.curly }
      patterns:
      - include: '#comment'

  objectInitBody:
    patterns:
    - begin: '\{'
      end: '(?=\})'
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns:
      - include: '#comment'
      - include: '#code'

  objectInitParameters:
    patterns:
    - begin: '\('
      end: '\)'
      beginCaptures:
        '0': { name: punctuation.definition.parameters.begin.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.parameters.end.ballerina }
      patterns:
      - include: '#code'
      - match: \b({{identifier}})\b
        name: variable.parameter.ballerina

  objectMemberFunctionDec:
    patterns:
    - begin: '\bfunction\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: ';'
      endCaptures:
        '0': { name:  punctuation.definition.block.ballerina }
      patterns:
      - include: '#functionParameters'
      - match: '\breturns\b'
        name: 'keyword.ballerina'
      - include: '#code'

  paranthesised:
    patterns:
    - begin: \(
      end: \)
      patterns:
      - include: '#function-defn'
      - include: '#comment'
      - include: '#code'

  paranthesisedBracket:
    patterns:
    - begin: \[
      end: \]
      patterns:
      - include: '#comment'
      - include: '#code'

  record:
    patterns:
    - begin: '\brecord\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}'
      endCaptures:
        '0': { name: delimiter.curly }
      patterns:
      - include: '#recordBody'
      - include: '#comment'

  recordBody:
    patterns:
    - begin: '\{'
      end: '(?=\})'
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns:
      - include: '#annotationAttachment'
      - include: '#comment'
      - include: '#objectMemberFunctionDec'
      - include: '#variableDefInline'
      - include: '#code'
      - include: '#variableDef'

  recordLiteral:
    patterns:
    - begin: '\{'
      end: '\}'
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns:
      - include: '#code'

  serviceBody:
    patterns:
    - include: '#comment'
    - include: '#mdDocumentation'
    - include: '#documentationDef'
    - include: '#decl-block'

  service-decl:
    name: meta.service.declaration.ballerina
    begin: '\bservice\b'
    end: '(?={{endOfStatement}})|(?<=\})'
    beginCaptures:
      '0': { name:  keyword.ballerina }
    patterns:
    - include: '#serviceName'
    - include: '#serviceOn'
    - include: '#serviceBody'

  serviceName:
    patterns:
    - name: entity.name.function.ballerina
      match: '(\/({{identifier}}*)|\"{{identifier}}\")'

  serviceOn:
    patterns:
    - begin: 'on'
      end: '(?={)'
      beginCaptures:
        '0': { name: keyword.ballerina }
      patterns:
      - include: "#code"

  strings:
    patterns:
    - begin: \"
      end: \"
      beginCaptures:
        '0': { name: string.begin.ballerina }
      endCaptures:
        '0': { name: string.end.ballerina }
      patterns:
        - name: constant.character.escape.ballerina
          match: \\.
        - name: string
          match: '.'

  string-character-escape:
    patterns:
    - name: constant.character.escape.ballerina
      match: \\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)

  stringTemplate:
    patterns:
    #- include: '#template-call'
    - name: string.template.ballerina
      begin: '({{identifier}})?(`)'
      beginCaptures:
        '1': { name: entity.name.function.tagged-template.ballerina }
        '2': { name: punctuation.definition.string.template.begin.ballerina }
      end: \\?`
      endCaptures:
        '0': { name: punctuation.definition.string.template.end.ballerina }
      patterns:
       - include: '#template-substitution-element'
       - include: '#string-character-escape'

  template-substitution-element:
    patterns:
    - name: meta.template.expression.ballerina
      begin: \$\{
      beginCaptures:
        '0': { name: punctuation.definition.template-expression.begin.ballerina }
      end: \}
      endCaptures:
        '0': { name: punctuation.definition.template-expression.end.ballerina }
      patterns:
        - include: '#expression'
      contentName: meta.embedded.line.ballerina

  typeDefinition:
    patterns:
    - begin: '\btype\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: ';'
      endCaptures:
        '0': { name: source.ballerina }
      patterns:
      - include: '#comment'
      - include: '#typeDescription'

  typeDescription:
    patterns:
    - begin: '{{identifier}}'
      beginCaptures:
        '0': { name: entity.name.function.ballerina }
      end: '(?=;)'
      endCaptures:
        '0': { name: source.ballerina }
      patterns:
      - include: '#comment'
      - include: '#objectDec'
      - include: '#record'
      - include: '#objectMemberFunctionDec'
      - include: '#literal'
      - match: '{{identifier}}'
        name: '{{typeScope}}'

  var-expr:
    patterns:
    - name: meta.var.expr.ballerina
      begin: (?={{varExprStart}})
      beginCaptures:
          '0': { name: storage.modifier.ballerina storage.type.ballerina }
      end: (?!{{varExprStart}})((?=;|}|{{endOfStatement}})|((?<!{{lookBehindString}}|{{lookBehindInt}})(?=\s*$)))
      patterns:
      - begin: '{{varExprStart}}\s*'
        beginCaptures:
          '0': { name: support.type.primitive.ballerina }
        end: (?=\S)
      - include: '#stringTemplate'
      - include: '#var-single-variable' 
      - include: '#variable-initializer' 
      # - include: '#punctuation-comma'

  var-single-variable:
    patterns:
    - name: meta.var-single-variable.expr.ballerina
      begin: ({{identifier}})
      beginCaptures:
        '1': { name: meta.definition.variable.ballerina variable.other.readwrite.ballerina }
      end: (?=$|^|[;,=}])
      endCaptures:
        '0': { name: punctuation.terminator.statement.ballerina }
    - name: meta.var-single-variable.expr.ballerina
      begin: ({{identifier}})(\!)?
      beginCaptures:
        '1': { name: meta.definition.variable.ballerina variable.other.readwrite.ballerina }
        '2': { name: keyword.operator.definiteassignment.ballerina }
      end: (?=$|^|[;,=}]|({{startOfIdentifier}}(of|in)\s+))  
      #patterns: 
      #- include: '#var-single-variable-type-annotation'

  variable-initializer:
    patterns:
    - begin: (?<!=|!)(=)(?!=)(?=\s*\S)
      beginCaptures:
        '1': { name: keyword.operator.assignment.ballerina }
      end: \;
      endCaptures:
        '0': { name: punctuation.terminator.statement.ballerina }
      patterns:
      - include: '#expression'
    - begin: (?<!=|!)(=)(?!=)
      beginCaptures:
        '1': { name: keyword.operator.assignment.ballerina }
      end: (?=[,);}\]]|({{startOfIdentifier}}(of|in)\s+))|(?=^\s*$)|(?<=\S)(?<!=)(?=\s*$)
      patterns:
        - include: '#expression'

  variableDef:
    patterns:
    - begin: '(?:(?!\+){{identifier}})(?: |\t)|(?=\()'
      beginCaptures:
        '0': { name: '{{typeScope}}' }
      end: '(?:{{identifier}})|(?=\,)|(?=;)|\.\.\.'
      endCaptures:
        '0': { name: source.ballerina }
      patterns:
      - include: '#tupleType'
      - include: '#constrainType'
      - include: '#comment'

  variableDefInline:
    patterns:
    - begin: '(?=record)|(?=object)'
      end: '(?=;)'
      patterns:
      - include: '#record'
      - include: '#objectDec'
      - match: '{{identifier}}'
        name: source.ballerina

  workerDef:
    patterns:
    - begin: '\bworker\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}'
      patterns:
      - include: '#functionReturns' 
      - include: '#workerBody'

  workerBody:
    patterns:
    - begin: '\{'
      end: (?=\})
      patterns:
      - include: '#code'

  parameter:
    patterns:
    - begin: ((?=record|object|function)|({{identifier}})(?=\|)|(?:{{identifier}}))
      beginCaptures:
        '0': { name: '{{typeScope}}' }
      end: (?:\,)|(?:\|)|(?:\:)|(?==>)|(?=\))|(?=\])
      patterns:
      - include: '#parameterWithDescriptor'
      - include: '#record'
      - include: '#objectDec'
      - include: '#functionType'
      - include: '#constrainType'
      - include: '#defaultValue'
      - include: '#comment'
      - include: '#parameterTuple'
      - match: '{{identifier}}'
        name: variable.parameter.ballerina

  parameterTuple:
    patterns:
    - begin: '\['
      end: (?=\,)|(?=\|)|(?=\:)|(?==>)|(?=\))
      patterns:
      - include: '#record'
      - include: '#objectDec'
      - include: '#parameterTupleType'
      - include: '#parameterTupleEnd'
      - include: '#comment'
  
  parameterTupleType:
    patterns:
    - begin: '{{identifier}}'
      beginCaptures:
        '0': { name: '{{typeScope}}' }
      end: (?:\,)|(?:\|)|(?=\])

  parameterTupleEnd:
    patterns:
    - begin: '\]'
      end: (?=\,)|(?=\|)|(?=\:)|(?==>)|(?=\))
      patterns:
      - include: '#defaultWithParentheses'
      - match: '{{identifier}}'
        name: default.variable.parameter.ballerina

  parameterWithDescriptor:
    patterns: 
    - begin: '\&'
      beginCaptures: 
        '0': { name: keyword.operator.ballerina }
      end: (?=\,)|(?=\|)|(?=\))
      patterns: 
      - include: '#parameter' 

  defaultWithParentheses:
    patterns:
    - begin: '\('
      beginCaptures: 
        '0': { name: punctuation.definition.block.ballerina }
      end: '\)'
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }

  string:
    patterns:
    - include: '#qstring-single'
    - include: '#qstring-double'

  qstring-double:
    patterns:
    - begin: '"'
      name: string.quoted.double.ballerina
      beginCaptures:
        '0': { name: punctuation.definition.string.begin.ballerina }
      end: '(")|((?:[^\\\n])$)'
      endCaptures:
        '1': { name: punctuation.definition.string.end.ballerina }
        '2': { name: invalid.illegal.newline.ballerina }
      patterns:
      - include: '#string-character-escape'

  qstring-single:
    patterns:
    - begin: "'"
      name: string.quoted.single.ballerina
      beginCaptures:
        '0': { name: punctuation.definition.string.begin.ballerina }
      end: (\')|((?:[^\\\n])$)
      endCaptures:
        '1': { name: punctuation.definition.string.end.ballerina }
        '2': { name: invalid.illegal.newline.ballerina }
      patterns:
      - include: '#string-character-escape'

  types:
    patterns:
    - name: '{{typeScope}}'
      match: \b(boolean|int|float|string|decimal|handle|var|any|anydata|byte|future|typedesc)\b

    - name: '{{typeScope}}'
      match: \b(map|json|xml|error|never|readonly|distinct)\b

    - name: '{{typeScope}}'
      match: \b(stream)\b

  xml:
    patterns:
    - begin: '(\bxml)(\s*)(`)'
      beginCaptures:
        '1': { name: 'keyword.ballerina' }
        '2': { name: '' }
        '3': { name: 'string.template.ballerina' }
      end: '`'
      endCaptures:
        '0': { name: 'string.template.ballerina' }
      patterns:
      - include: '#xmlTag'
      - include: '#xmlComment'
      - include: '#templateVariable'
      - name: string
        match: '.'

  xmlTag:
    patterns:
    - begin: '(<\/?\??)\s*([-_a-zA-Z0-9]+)'
      beginCaptures:
        '1': { name: '{{xmlTagAngle}}' }
        '2': { name: '{{xmlTag}}' }
      end: '\??\/?>'
      endCaptures:
        '0': { name: '{{xmlTagAngle}}' }
      patterns:
      - include: '#xmlSingleQuotedString'
      - include: '#xmlDoubleQuotedString'
      - name: '{{xmlAttribute}}'
        match: '([a-zA-Z0-9-]+)'

  xmlComment:
    patterns:
    - begin: '<!--'
      beginCaptures:
        '0': { name: comment.block.xml.ballerina }
      end: '-->'
      endCaptures:
        '0': { name: comment.block.xml.ballerina }
      name: 'comment.block.xml.ballerina'

  xmlSingleQuotedString:
    patterns:
    - begin: \'
      end: \'
      beginCaptures:
        '0': { name: string.begin.ballerina }
      endCaptures:
        '0': { name: string.end.ballerina }
      patterns:
        - name: constant.character.escape.ballerina
          match: \\.
        - name: string
          match: '.'

  xmlDoubleQuotedString:
    patterns:
    - begin: \"
      end: \"
      beginCaptures:
        '0': { name: string.begin.ballerina }
      endCaptures:
        '0': { name: string.end.ballerina }
      patterns:
        - name: constant.character.escape.ballerina
          match: \\.
        - name: string
          match: '.'

  templateVariable:
    patterns:
    - begin: '\${'
      beginCaptures:
        '0': { name: 'constant.character.escape.ballerina'}
      end: '}'
      endCaptures:
        '0': { name: 'constant.character.escape.ballerina'}
      patterns:
      - include: '#code'

  keywords:
    patterns:
    - name: keyword.control.ballerina
      match: \b(else|fork|join|while|foreach|in|return|returns|break|transaction|transactional|retry|commit|rollback|continue|typeof|enum|wait|check|checkpanic|panic|trap|match)\b

    - name: keyword.other.ballerina
      match: \b(public|private|external|type|record|object|remote|abstract|client|true|false|fail|import|version)\b

    - name: keyword.other.ballerina
      match: \b(as|on|resource|listener|const|final|is|null|lock|annotation|source|worker|parameter|field|isolated)\b

    - name: keyword.other.ballerina
      match: \b(xmlns|table|key|let|new|from|where|select|start|flush|default|do|base16|base64|conflict)\b

    - name: keyword.other.ballerina
      match: \b(limit|outer|equals|order|by|ascending|descending|class|configurable|variable|module|service)\b

    - name: keyword.operator.ballerina
      match: (!|%|\+|\-|~=|===|==|=|!=|!==|<|>|&|\||\?:|\.\.\.|\?|<=|=>|>=|&&|\|\||~|>>|>>>)

    - include: '#types'

  literal:
    patterns:
    - include: '#booleans'
    - include: '#numbers'
    - include: '#strings'
    - include: '#maps'
    - include: '#self-literal'

  self-literal:
    patterns:
    - match: '{{startOfIdentifier}}self\b(?!\$)'
      name: variable.language.this.ballerina

  code:
    patterns:
    - include: '#booleans'
    - include: '#matchStatement'
    - include: '#butExp'
    - include: '#xml'
    - include: '#stringTemplate'
    - include: '#keywords'
    - include: '#strings'
    - include: '#comment'
    - include: '#mdDocumentation'
    - include: '#annotationAttachment'
    - include: '#numbers'
    - match: '{{identifier}}'
    - include: '#maps'
    - include: '#paranthesised'
    - include: '#paranthesisedBracket'

  type-primitive:
    patterns:
    - match: '{{startOfIdentifier}}(string|int|boolean){{endOfIdentifier}}'
      name: support.type.primitive.ballerina
    