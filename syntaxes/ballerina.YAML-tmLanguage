# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Ballerina
scopeName: source.ballerina
fileTypes: [bal]
uuid: c01f5512-489a-41bd-ba5d-caf4b55ae3b3

variables:
  identifier: '(?:{{letter}}{{letterOrDigit}}*)|(?:\^"{{identifierLiteralChar}}+")'
  letter: '[a-zA-Z_]'
  letterOrDigit: '[a-zA-Z0-9_]'
  identifierLiteralChar: ([^|"\\\f\n\r\t]|\\\\[btnfr]|\\[|"\\/])

monarchVariables:
  typeScope: 'type.ballerina'
  annotationScope: 'type.ballerina'
  numberScope: 'number'
  xmlTagAngle: 'tag'
  xmlAttribute: 'variable.parameter'
  xmlTag: 'tag'

tmlVariables:
  typeScope: 'storage.type.ballerina'
  annotationScope: 'storage.type.annotation.ballerina'
  numberScope: 'constant.numeric.decimal.ballerina'
  xmlTagAngle: 'punctuation.definition.tag.begin.xml.ballerina'
  xmlAttribute: 'entity.other.attribute-name.xml.ballerina'
  xmlTag: 'entity.name.tag.xml.ballerina'

patterns:
- include: '#functionDefinition'
- include: '#serviceDefinition'
- include: '#endpointDef'
- include: '#documentationDef'
- include: '#mdDocumentation'
- include: '#typeDef'
- include: '#objectDec'
- include: '#record'
- include: '#annotationDec'
- include: '#recordLiteral'
- include: '#comment'
- include: '#code'

repository:
  annotationDec:
    patterns:
    - match: '@((?:{{identifier}}):)?(?:{{identifier}})'
      name: '{{annotationScope}}'

  booleans:
    patterns:
    - match: '\b(true|false)\b'
      name: constant.language.boolean.ballerina

  butExp:
    patterns:
    - begin: '\bbut\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}'
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      patterns:
      - include: '#butExpBody'
      - include: '#comment'

  butExpBody:
    patterns:
    - begin: \{
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      end: '(?=\})'
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      patterns:
      - include: '#parameter'
      - include: '#butClause'
      - include: '#comment'

  butClause:
    patterns:
    - begin: '=>'
      beginCaptures:
        '0': { name:  keyword.operator.ballerina }
      end: ',|(?=\})'
      patterns:
      - include: '#code'

  call:
    patterns:
    - match: ({{identifier}})\s*(?=\()
      name: entity.name.function.ballerina

  comment:
    patterns:
    - name: comment.ballerina
      match: \/\/.*

  constrainType:
    patterns:
    - begin: '<'
      end: '>'
      beginCaptures:
        '0': { name: punctuation.definition.parameters.begin.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.parameters.end.ballerina }
      patterns:
      - include: '#comment'
      - include: '#continuedType'
      - include: '#constrainType'
      - name: '{{typeScope}}'
        match: \b({{identifier}})\b

  tupleType:
    patterns:
    - begin: '\('
      end: '(?=\)|;)'
      patterns:
      - include: '#comment'
      - include: '#continuedType'
      - include: '#constrainType'
      - name: '{{typeScope}}'
        match: \b({{identifier}})\b

  defaultValue:
    patterns:
    - begin: '[=:]'
      beginCaptures:
        '0': { name:  keyword.operator.ballerina }
      end: (?=[,)])
      patterns:
        - include: '#code'

  documentationDef:
    patterns:
    - begin: \b(?:documentation|deprecated)\b
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}'
      endCaptures:
        '0': { name: delimiter.curly }
      patterns:
      - include: '#documentationBody'
      - include: '#comment'
  
  documentationBody:
    patterns:
    - begin: \{
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      end: '(?=\})'
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      patterns:
      - match: (P|R|T|F|V)({{)(.*)(}})
        captures:
          '1': {name: keyword.other.ballerina.documentation}
          '2': {name: keyword.other.ballerina.documentation}
          '3': {name: variable.parameter.ballerina.documentation}
          '4': {name: keyword.other.ballerina.documentation}

      - name: comment.block.code.ballerina.documentation
        begin: \```
        end: \```

      - name: comment.block.code.ballerina.documentation
        begin: \``
        end: \``

      - name: comment.block.code.ballerina.documentation
        begin: \`
        end: \`

      - name: comment.block.ballerina.documentation
        match: .

  endpointDef:
    patterns:
    - begin: '\bendpoint\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: ';'
      patterns:
      - include: '#parameter'
      - include: '#recordLiteral'
      - include: '#comment'

  callableUnitBody:
    patterns:
    - begin: '\{'
      end: '(?=\})'
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns:
      - include: '#endpointDef'
      - include: '#workerDef'
      - include: '#code'

  functionDefinition:
    patterns:
    - begin: '\bfunction\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}|(?=;)'
      endCaptures:
        '0': { name:  punctuation.definition.block.ballerina }
      patterns:
      - include: '#functionParameters'
      - include: '#functionReturns'
      - include: '#functionName'
      - include: '#callableUnitBody'
      - include: '#comment'

  functionName:
    patterns:
    - name: entity.name.function.ballerina
      match: '{{identifier}}'

  functionParameters:
    patterns:
    - begin: '\('
      end: '\)'
      beginCaptures:
        '0': { name: delimiter.parenthesis }
      endCaptures:
        '0': { name: delimiter.parenthesis }
      patterns:
      - include: '#parameter'
      - include: '#parameterTuple'
      - include: '#defaultValue'
      - include: '#comment'

  functionReturns:
    patterns:
    - begin: '\breturns\b'
      beginCaptures:
        '0': { name: keyword.ballerina }
      end: (?=\{|;)
      endCaptures:
        '0': { name: curly }
      patterns:
        - match: '{{identifier}}'
          name: '{{typeScope}}'
        - include: '#comment'

  maps:
    patterns:
    - begin: \{
      end: \}
      beginCaptures:
        '0': { name: punctuation.definition.string.begin.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.string.end.ballerina }
      patterns:
      - include: '#code'

  matchStatementPatternClause:
    patterns:
    - begin: '=>'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '((\})|;|,)'
      patterns:
      - include: '#callableUnitBody'
      - include: '#code'

  matchStatement:
    patterns:
    - begin: '\bmatch\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}'
      patterns:
      - include: '#matchStatementBody'
      - include: '#comment'
      - include: '#code'

  matchStatementBody:
    patterns:
    - begin: \{
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      end: (?=\})
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina.documentation }
      patterns:
      - include: '#parameter'
      - include: '#matchStatementPatternClause'
      - include: '#comment'

  mdDocumentation:
    patterns:
    - include: '#mdDocumentationReturnParamDescription'
    - include: '#mdDocumentationParamDescription'
    - match: '#.*'
      name: comment.mddocs.ballerina

  mdDocumentationParamDescription:
    patterns:
    - begin: '(#)(?: ?)(\+)(?: *)({{identifier}})?(?: *)(-)?(.*)'
      beginCaptures:
        '1': { name:  comment.mddocs.ballerina }
        '2': { name:  keyword.ballerina }
        '3': { name:  variable.parameter.ballerina }
        '5': { name:  keyword.ballerina }
        '6': { name:  comment.mddocs.paramdesc.ballerina }
      end: '(?=[^#\r\n]|(?:# ?\+))'
      patterns:
      - match: '#.*'
        name: comment.mddocs.paramdesc.ballerina

  mdDocumentationReturnParamDescription:
    patterns:
    - begin: '(#)(?: ?)(\+)(?: *)(return)(?: *)(-)?(.*)'
      beginCaptures:
        '1': { name:  comment.mddocs.ballerina }
        '2': { name:  keyword.ballerina }
        '3': { name:  keyword.ballerina }
        '4': { name:  keyword.ballerina }
        '5': { name:  comment.mddocs.returnparamdesc.ballerina }
      end: '(?=[^#\r\n]|(?:# ?\+))'
      patterns:
      - match: '#.*'
        name: comment.mddocs.returnparamdesc.ballerina

  numbers:
    patterns:
    - match: '\b0[xX][\da-f]+\b|\b\d+(?:\.(?:\d+|$))?'
      name: '{{numberScope}}'

  objectBody:
    patterns:
    - begin: '\{'
      end: '(?=\})'
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns:
      - include: '#varDefBlock'
      - include: '#mdDocumentation'
      - include: '#documentationDef'
      - include: '#objectInitDec'
      # - include: '#functionDec'
      - include: '#annotationDec'
      - include: '#variableDef'
      - include: '#comment'
      - include: '#code'

  objectDec:
    patterns:
    - begin: '\bobject\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}'
      endCaptures:
        '0': { name: delimiter.curly }
      patterns:
      - include: '#objectBody'
      - include: '#comment'

  objectInitBody:
    patterns:
    - begin: '\{'
      end: '(?=\})'
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns:
      - include: '#comment'
      - include: '#code'

  objectInitDec:
    patterns:
    - begin: '\bnew\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}'
      patterns:
      - include: '#objectInitParameters'
      - include: '#objectInitBody'

  objectInitParameters:
    patterns:
    - begin: '\('
      end: '\)'
      beginCaptures:
        '0': { name: punctuation.definition.parameters.begin.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.parameters.end.ballerina }
      patterns:
      - include: '#code'
      - match: \b({{identifier}})\b
        name: variable.parameter.ballerina

  objectMemberFunctionDec:
    patterns:
    - begin: '\bfunction\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '(?=(?:\}|;))'
      endCaptures:
        '0': { name:  punctuation.definition.block.ballerina }
      patterns:
      - include: '#functionReceiver'
      - include: '#functionParameters'
      - include: '#functionReturns'
      - include: '#functionName'
      - include: '#callableUnitBody'
      - include: '#comment'

  paranthesised:
    patterns:
    - begin: \(
      end: \)
      patterns:
      - include: '#comment'
      - include: '#code'

  paranthesisedBracket:
    patterns:
    - begin: \[
      end: \]
      patterns:
      - include: '#comment'
      - include: '#code'

  record:
    patterns:
    - begin: '\brecord\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}'
      endCaptures:
        '0': { name: delimiter.curly }
      patterns:
      - include: '#recordBody'
      - include: '#comment'

  recordBody:
    patterns:
    - begin: '\{'
      end: '(?=\})'
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns:
      - include: '#annotationDec'
      - include: '#variableDef'
      - include: '#comment'
      - include: '#code'

  recordLiteral:
    patterns:
    - begin: '\{'
      end: '\}'
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns:
      - include: '#code'

  serviceBody:
    patterns:
    - begin: '\{'
      end: '(?=\})'
      beginCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns:
      - include: '#comment'
      - include: '#mdDocumentation'
      - include: '#documentationDef'
      - include: '#annotationDec'
      - include: '#endpointDef'
      - include: '#functionDefinition'
      - include: '#recordLiteral'
      - include: '#code'

  serviceDefinition:
    patterns:
    - begin: '\bservice\b'
      end: '\}'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      endCaptures:
        '0': { name: punctuation.definition.block.ballerina }
      patterns:
      - include: '#comment'
      - include: '#serviceBody'
      - include: '#serviceOn'
      - include: '#serviceName'

  serviceName:
    patterns:
    - name: entity.name.function.ballerina
      match: '{{identifier}}'

  serviceOn:
    patterns:
    - begin: 'on'
      end: '(?={)'
      beginCaptures:
        '0': { name: keyword.ballerina }
      patterns:
      - include: "#code"

  strings:
    patterns:
    - begin: \"
      end: \"
      beginCaptures:
        '0': { name: string.begin.ballerina }
      endCaptures:
        '0': { name: string.end.ballerina }
      patterns:
        - name: constant.character.escape.ballerina
          match: \\.
        - name: string
          match: '.'

  stringTemplate:
    patterns:
    - begin: '(\bstring)(\s*)(`)'
      beginCaptures:
        '1': { name: 'keyword.ballerina' }
        '2': { name: '' }
        '3': { name: 'string.template.ballerina' }
      end: '`'
      endCaptures:
        '0': { name: 'string.template.ballerina' }
      patterns:
      - include: '#templateVariable'
      - name: string
        match: '.'

  SymbolicStringLiteral:
    patterns:
    - name: string.symbolic.ballerina
      match: \'[a-zA-z_][a-zA-z_0-9]*

  typeDef:
    patterns:
    - begin: '\btype\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\b{{identifier}}\b'
      endCaptures:
        '0': { name: source.ballerina }
      patterns:
      - include: '#comment'

  varDefBlock:
    patterns:
    - begin: \b(?:private|public)\b
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}|;|,'
      patterns:
      - include: '#objectMemberFunctionDec'
      - include: '#variableDef'
      - include: '#code'

  variableDef:
    patterns:
    - begin: \b(?:{{identifier}})\b|(?=\()
      beginCaptures:
        '0': { name: '{{typeScope}}' }
      end: \b(?:{{identifier}})\b|(?=\,)|(?=;)|\.\.\.
      endCaptures:
        '0': { name: source.ballerina }
      patterns:
      - include: '#tupleType'
      - include: '#continuedType'
      - include: '#constrainType'
      - include: '#comment'

  workerDef:
    patterns:
    - begin: '\bworker\b'
      beginCaptures:
        '0': { name:  keyword.ballerina }
      end: '\}'
      patterns:
      - include: '#workerBody'

  workerBody:
    patterns:
    - begin: '\{'
      end: (?=\})
      patterns:
      - include: '#code'

  parameter:
    patterns:
    - begin: \b(?:{{identifier}})\b
      beginCaptures:
        '0': { name: '{{typeScope}}' }
      end: (?:\,)|(?:\|)|(?:\:)|(?==>)|(?=\))
      patterns:
      - include: '#constrainType'
      - include: '#comment'
      - include: '#parameterTuple'
      - match: '{{identifier}}'
        name: variable.parameter.ballerina

  parameterTuple:
    patterns:
    - begin: '\('
      end: (?=\,)|(?=\|)|(?=\:)|(?==>)
      patterns:
      - include: '#parameter'
      - include: '#parameterTupleEnd'

  parameterTupleEnd:
    patterns:
    - begin: '\)'
      end: (?=\,)|(?=\|)|(?=\:)|(?==>)|(?=\))
      patterns:
      - match: '{{identifier}}'
        name: variable.parameter.ballerina

  types:
    patterns:
    - name: '{{typeScope}}'
      match: \b(boolean|int|float|string|var|any|datatable|table|byte|future|typedesc)\b

    - name: '{{typeScope}}'
      match: \b(map|exception|json|xml|xmlns|error)\b

    - name: '{{typeScope}}'
      match: \b(stream|streamlet|aggregation)\b

  xml:
    patterns:
    - begin: '(\bxml)(\s*)(`)'
      beginCaptures:
        '1': { name: 'keyword.ballerina' }
        '2': { name: '' }
        '3': { name: 'string.template.ballerina' }
      end: '`'
      endCaptures:
        '0': { name: 'string.template.ballerina' }
      patterns:
      - include: '#xmlTag'
      - include: '#xmlComment'
      - include: '#templateVariable'
      - name: text.xml.ballerina
        match: '.'

  xmlTag:
    patterns:
    - begin: '(<\/?\??)\s*([-_a-zA-Z0-9]+)'
      beginCaptures:
        '1': { name: '{{xmlTagAngle}}' }
        '2': { name: '{{xmlTag}}' }
      end: '\??\/?>'
      endCaptures:
        '0': { name: '{{xmlTagAngle}}' }
      patterns:
      - include: '#xmlSingleQuotedString'
      - include: '#xmlDoubleQuotedString'
      - name: '{{xmlAttribute}}'
        match: '([a-zA-Z-]+)'

  xmlComment:
    patterns:
    - begin: '<!--'
      beginCaptures:
        '0': { name: comment.block.xml.ballerina }
      end: '-->'
      endCaptures:
        '0': { name: comment.block.xml.ballerina }
      name: 'comment.block.xml.ballerina'

  xmlSingleQuotedString:
    patterns:
    - begin: \'
      end: \'
      beginCaptures:
        '0': { name: string.begin.ballerina }
      endCaptures:
        '0': { name: string.end.ballerina }
      patterns:
        - name: constant.character.escape.ballerina
          match: \\.
        - name: string
          match: '.'

  xmlDoubleQuotedString:
    patterns:
    - begin: \"
      end: \"
      beginCaptures:
        '0': { name: string.begin.ballerina }
      endCaptures:
        '0': { name: string.end.ballerina }
      patterns:
        - name: constant.character.escape.ballerina
          match: \\.
        - name: string
          match: '.'

  templateVariable:
    patterns:
    - begin: '{{'
      beginCaptures:
        '0': { name: 'constant.character.escape.ballerina'}
      end: '}}'
      endCaptures:
        '0': { name: 'constant.character.escape.ballerina'}
      patterns:
      - include: '#code'

  keywords:
    patterns:
    - name: keyword.control.ballerina
      match: \b(if|else|iterator|try|catch|finally|fork|join|all|some|while|foreach|in|throw|return|returns|break|timeout|transaction|abort|retry|retries|continue|bind|with|lengthof|typeof|enum|wait)\b

    - name: keyword.other.ballerina
      match: \b(import|version|public|private|attach|as|native|documentation|lock|new|record|limit|ascending|descending|check|start|done|untaint|onretry|oncommit|onabort|scope|compensate|compensation|primarykey|channel|abstract|extern|final|listener|remote|client|__init)\b

    - name: keyword.other.siddhi.ballerina
      match: \b(forever|from|on|select|group|by|having|order|where|followed|insert|into|update|delete|set|for|window|query)\b

    - name: keyword.other.ballerina
      match: \b(annotation|package|type|connector|function|resource|service|action|worker|struct|transformer|endpoint|object)\b

    - name: keyword.other.ballerina
      match: \b(const|true|false|reply|create|parameter)\b

    - name: keyword.operator.ballerina
      match: (!|%|\+|\-|~=|==|=|!=|<|>|&&|\|\||\?:|\.\.\.)

    - include: '#types'

  code:
    patterns:
    - include: '#booleans'
    - include: '#matchStatement'
    - include: '#butExp'
    - include: '#xml'
    - include: '#stringTemplate'
    - include: '#keywords'
    - include: '#strings'
    - include: '#maps'
    - include: '#paranthesised'
    - include: '#paranthesisedBracket'
    - include: '#SymbolicStringLiteral'
    - include: '#numbers'
    - include: '#comment'
