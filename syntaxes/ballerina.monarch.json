{
    "root": [
        {
            "include": "statements"
        }
    ],
    "statements": [
        {
            "include": "stringTemplate"
        },
        {
            "include": "declaration"
        },
        {
            "include": "control-statement"
        },
        {
            "include": "decl-block"
        },
        {
            "include": "expression"
        },
        {
            "include": "punctuation-semicolon"
        },
        {
            "include": "string"
        },
        {
            "include": "comment"
        },
        {
            "include": "mdDocumentation"
        },
        {
            "include": "keywords"
        },
        {
            "include": "annotationAttachment"
        }
    ],
    "stringTemplate": [
        [
            "((string)|([_$[:alpha:]][_$[:alnum:]]*))?(`)",
            [
                {
                    "next": "stringTemplate__b__0",
                    "token": "entity.name.function.tagged-template.ballerina"
                },
                "support.type.primitive.ballerina",
                "punctuation.definition.string.template.begin.ballerina"
            ]
        ]
    ],
    "stringTemplate__b__0": [
        [
            "\\\\?`",
            {
                "next": "@pop",
                "token": "punctuation.definition.string.template.end.ballerina"
            }
        ],
        {
            "include": "template-substitution-element"
        },
        {
            "include": "string-character-escape"
        }
    ],
    "template-substitution-element": [
        [
            "\\$\\{",
            {
                "next": "template-substitution-element__b__0",
                "token": "punctuation.definition.template-expression.begin.ballerina"
            }
        ]
    ],
    "template-substitution-element__b__0": [
        [
            "\\}",
            {
                "next": "@pop",
                "token": "punctuation.definition.template-expression.end.ballerina"
            }
        ],
        {
            "include": "expression"
        }
    ],
    "expression": [
        {
            "include": "keywords"
        },
        {
            "include": "expressionWithoutIdentifiers"
        },
        {
            "include": "identifiers"
        }
    ],
    "keywords": [
        [
            "\\b(fork|join|while|foreach|in|returns|transaction|transactional|retry|commit|rollback|typeof|enum|wait|match)\\b",
            "keyword.control.ballerina"
        ],
        [
            "\\b(return|break|continue|check|checkpanic|panic|trap|from|where)\\b",
            "keyword.control.flow.ballerina"
        ],
        [
            "\\b(public|private|external|return|record|object|remote|abstract|client|true|false|fail|import|version)\\b",
            "keyword.other.ballerina"
        ],
        [
            "\\b(as|on|function|resource|listener|const|final|is|null|lock|annotation|source|worker|parameter|field|isolated)\\b",
            "keyword.other.ballerina"
        ],
        [
            "\\b(xmlns|table|key|let|new|select|start|flush|default|do|base16|base64|conflict)\\b",
            "keyword.other.ballerina"
        ],
        [
            "\\b(limit|outer|equals|order|by|ascending|descending|class|configurable|variable|module|service)\\b",
            "keyword.other.ballerina"
        ],
        [
            "(!|%|\\+|\\-|~=|===|==|=|!=|!==|<|>|&|\\||\\?:|\\.\\.\\.|<=|=>|>=|&&|\\|\\||~|>>|>>>)",
            "keyword.operator.ballerina"
        ],
        {
            "include": "types"
        }
    ],
    "types": [
        [
            "\\b(handle|any|anydata|future|typedesc)\\b",
            "type"
        ],
        [
            "\\b(boolean|int|string|float|decimal|byte|var)\\b",
            "support.type.primitive.ballerina"
        ],
        [
            "\\b(map|json|xml|error|never|readonly|distinct)\\b",
            "type"
        ],
        [
            "\\b(stream)\\b",
            "type"
        ]
    ],
    "expressionWithoutIdentifiers": [
        {
            "include": "string"
        },
        {
            "include": "stringTemplate"
        },
        {
            "include": "comment"
        },
        {
            "include": "object-literal"
        },
        {
            "include": "ternary-expression"
        },
        {
            "include": "expression-operators"
        },
        {
            "include": "literal"
        },
        {
            "include": "paranthesised"
        }
    ],
    "string": [
        {
            "include": "qstring-double"
        }
    ],
    "qstring-double": [
        [
            "\"",
            {
                "next": "qstring-double__b__0",
                "token": "punctuation.definition.string.begin.ballerina"
            }
        ]
    ],
    "qstring-double__b__0": [
        [
            "((?:[^\\\\\\n])$)",
            {
                "next": "@pop",
                "token": "invalid.illegal.newline.ballerina"
            }
        ],
        [
            "(\")",
            {
                "next": "@pop",
                "token": "punctuation.definition.string.end.ballerina"
            }
        ],
        {
            "include": "string-character-escape"
        }
    ],
    "string-character-escape": [
        [
            "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)",
            "constant.character.escape.ballerina"
        ]
    ],
    "comment": [
        [
            "\\/\\/.*",
            "comment.ballerina"
        ]
    ],
    "object-literal": [
        {
            "include": "object-member"
        }
    ],
    "object-member": [
        [
            "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+",
            [
                {
                    "next": "object-member__b__5",
                    "token": "keyword.control.as.ballerina"
                }
            ]
        ],
        [
            "\\.\\.\\.",
            {
                "next": "object-member__b__4",
                "token": "keyword.operator.spread.ballerina"
            }
        ],
        {
            "include": "comment"
        },
        {
            "include": "function-defn"
        },
        {
            "include": "literal"
        },
        {
            "include": "keywords"
        },
        [
            "(?=\\[)",
            {
                "next": "object-member__b__0",
                "token": ""
            }
        ],
        [
            "(?=[\\'\\\"\\`])",
            {
                "next": "object-member__b__1",
                "token": ""
            }
        ],
        [
            "(?x)(?={{anyNumber}})",
            {
                "next": "object-member__b__2",
                "token": ""
            }
        ],
        [
            "(?<=[\\]\\'\\\"\\`])(?=\\s*[\\(\\<])",
            {
                "next": "object-member__b__3",
                "token": ""
            }
        ],
        [
            "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=({{inlineComment}}\\s*)*:)",
            [
                "meta.object-literal.key.ballerina",
                "constant.numeric.decimal.ballerina"
            ]
        ],
        [
            "(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=({{inlineComment}}\\s*)*:(\\s*{{inlineComment}})*{{functionOrArrowLookup}}))",
            [
                "meta.object-literal.key.ballerina",
                "entity.name.function.ballerina"
            ]
        ],
        [
            "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=({{inlineComment}}\\s*)*:)",
            [
                "meta.object-literal.key.ballerina"
            ]
        ],
        [
            "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$|\\/\\/|\\/\\*)",
            [
                "variable.other.readwrite.ballerina"
            ]
        ],
        [
            "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*([,}]|$))",
            [
                "keyword.control.as.ballerina",
                "storage.modifier.ballerina"
            ]
        ],
        [
            "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)",
            {
                "next": "object-member__b__6",
                "token": ""
            }
        ]
    ],
    "function-defn": [
        [
            "\\bexternal\\b",
            "keyword.ballerina"
        ],
        {
            "include": "functionName"
        },
        {
            "include": "functionParameters"
        },
        {
            "include": "functionReturns"
        },
        {
            "include": "punctuation-semicolon"
        },
        {
            "include": "function-body"
        }
    ],
    "functionName": [
        [
            "\\bfunction\\b",
            "keyword.other.ballerina"
        ],
        [
            "[_$[:alpha:]][_$[:alnum:]]*",
            "meta.definition.function.ballerina entity.name.function.ballerina"
        ]
    ],
    "functionParameters": [
        {
            "include": "function-parameters-body"
        }
    ],
    "function-parameters-body": [
        {
            "include": "comment"
        },
        {
            "include": "string"
        },
        {
            "include": "annotationAttachment"
        },
        {
            "include": "recordLiteral"
        },
        {
            "include": "parameter-name"
        },
        {
            "include": "variable-initializer"
        },
        [
            "\\,",
            "punctuation.separator.parameter.ballerina"
        ]
    ],
    "annotationAttachment": [
        [
            "(@)((?:[_$[:alpha:]][_$[:alnum:]]*))\\s*(:?)\\s*((?:[_$[:alpha:]][_$[:alnum:]]*)?)",
            [
                "punctuation.decorator.ballerina",
                "type",
                "punctuation.decorator.ballerina",
                "type"
            ]
        ]
    ],
    "recordLiteral": [
        [
            "\\{",
            {
                "next": "recordLiteral__b__0",
                "token": "punctuation.definition.block.ballerina"
            }
        ]
    ],
    "recordLiteral__b__0": [
        [
            "\\}",
            {
                "next": "@pop",
                "token": "punctuation.definition.block.ballerina"
            }
        ],
        {
            "include": "code"
        }
    ],
    "code": [
        {
            "include": "booleans"
        },
        {
            "include": "matchStatement"
        },
        {
            "include": "butExp"
        },
        {
            "include": "xml"
        },
        {
            "include": "stringTemplate"
        },
        {
            "include": "keywords"
        },
        {
            "include": "strings"
        },
        {
            "include": "comment"
        },
        {
            "include": "mdDocumentation"
        },
        {
            "include": "annotationAttachment"
        },
        {
            "include": "numbers"
        },
        [
            "[_$[:alpha:]][_$[:alnum:]]*",
            null
        ],
        {
            "include": "maps"
        },
        {
            "include": "paranthesised"
        },
        {
            "include": "paranthesisedBracket"
        },
        [
            "[a-z][\\w$]*",
            "identifier"
        ]
    ],
    "booleans": [
        [
            "\\b(true|false)\\b",
            "constant.language.boolean.ballerina"
        ]
    ],
    "matchStatement": [
        [
            "\\bmatch\\b",
            {
                "next": "matchStatement__b__0",
                "token": "keyword.control.ballerina"
            }
        ]
    ],
    "matchStatement__b__0": [
        [
            "\\}",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "matchStatementBody"
        },
        {
            "include": "comment"
        },
        {
            "include": "code"
        }
    ],
    "matchStatementBody": [
        [
            "\\{",
            {
                "next": "matchStatementBody__b__0",
                "token": "punctuation.definition.block.ballerina.documentation"
            }
        ]
    ],
    "matchStatementBody__b__0": [
        [
            "(?=\\})",
            {
                "next": "@pop",
                "token": "punctuation.definition.block.ballerina.documentation"
            }
        ],
        {
            "include": "literal"
        },
        {
            "include": "matchBindingPattern"
        },
        {
            "include": "matchStatementPatternClause"
        },
        {
            "include": "comment"
        },
        {
            "include": "code"
        }
    ],
    "literal": [
        {
            "include": "booleans"
        },
        {
            "include": "numbers"
        },
        {
            "include": "strings"
        },
        {
            "include": "maps"
        },
        {
            "include": "self-literal"
        },
        {
            "include": "array-literal"
        }
    ],
    "numbers": [
        [
            "\\b0[xX][\\da-f]+\\b|\\b\\d+(?:\\.(?:\\d+|$))?",
            "number"
        ]
    ],
    "strings": [
        [
            "\\\"",
            {
                "next": "strings__b__0",
                "token": "string.begin.ballerina"
            }
        ]
    ],
    "strings__b__0": [
        [
            "\\\"",
            {
                "next": "@pop",
                "token": "string.end.ballerina"
            }
        ],
        [
            "\\\\.",
            "constant.character.escape.ballerina"
        ],
        [
            ".",
            "string"
        ]
    ],
    "maps": [
        [
            "\\{",
            {
                "next": "maps__b__0",
                "token": ""
            }
        ]
    ],
    "maps__b__0": [
        [
            "\\}",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "code"
        }
    ],
    "self-literal": [
        [
            "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))self\\b(?!\\$)",
            "variable.language.this.ballerina"
        ]
    ],
    "array-literal": [
        {
            "include": "expression"
        },
        {
            "include": "punctuation-comma"
        }
    ],
    "punctuation-comma": [
        [
            ",",
            "punctuation.separator.comma.ballerina"
        ]
    ],
    "matchBindingPattern": [
        [
            "var",
            {
                "next": "matchBindingPattern__b__0",
                "token": "type"
            }
        ]
    ],
    "matchBindingPattern__b__0": [
        [
            "(?==>)|,",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "errorDestructure"
        },
        {
            "include": "code"
        },
        [
            "[_$[:alpha:]][_$[:alnum:]]*",
            "variable.parameter.ballerina"
        ]
    ],
    "errorDestructure": [
        [
            "error",
            {
                "next": "errorDestructure__b__0",
                "token": "type"
            }
        ]
    ],
    "errorDestructure__b__0": [
        [
            "(?==>)",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "code"
        }
    ],
    "matchStatementPatternClause": [
        [
            "=>",
            {
                "next": "matchStatementPatternClause__b__0",
                "token": "keyword.ballerina"
            }
        ]
    ],
    "matchStatementPatternClause__b__0": [
        [
            "((\\})|;|,)",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "callableUnitBody"
        },
        {
            "include": "code"
        }
    ],
    "callableUnitBody": [
        [
            "\\{",
            {
                "next": "callableUnitBody__b__0",
                "token": "punctuation.definition.block.ballerina"
            }
        ]
    ],
    "callableUnitBody__b__0": [
        [
            "(?=\\})",
            {
                "next": "@pop",
                "token": "punctuation.definition.block.ballerina"
            }
        ],
        {
            "include": "workerDef"
        },
        {
            "include": "service-decl"
        },
        {
            "include": "objectDec"
        },
        {
            "include": "function-defn"
        },
        {
            "include": "forkStatement"
        },
        {
            "include": "code"
        }
    ],
    "workerDef": [
        [
            "\\bworker\\b",
            {
                "next": "workerDef__b__0",
                "token": "keyword.ballerina"
            }
        ]
    ],
    "workerDef__b__0": [
        [
            "\\}",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "functionReturns"
        },
        {
            "include": "workerBody"
        }
    ],
    "functionReturns": [
        {
            "include": "string"
        },
        [
            "\\s*\\b(string|int|boolean|float|byte|decimal|var)(?=\\s+|\\[|\\?)",
            [
                "support.type.primitive.ballerina"
            ]
        ],
        [
            "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\?)?",
            [
                "keyword.operator.rest.ballerina",
                "variable.other.readwrite.ballerina",
                "keyword.operator.optional.ballerina"
            ]
        ],
        [
            "\\|",
            "keyword.operator.ballerina"
        ],
        [
            "\\?",
            "keyword.operator.optional.ballerina"
        ],
        {
            "include": "multiType"
        },
        {
            "include": "type-annotation"
        },
        {
            "include": "keywords"
        }
    ],
    "multiType": [
        [
            "(?<=\\|)([_$[:alpha:]][_$[:alnum:]]*)|([_$[:alpha:]][_$[:alnum:]]*)(?=\\|)",
            "type"
        ],
        [
            "\\|",
            "keyword.operator.ballerina"
        ]
    ],
    "type-annotation": [
        [
            "(\\:)",
            [
                {
                    "next": "type-annotation__b__0",
                    "token": "keyword.operator.type.annotation.ballerina"
                }
            ]
        ]
    ],
    "type-annotation__b__0": [
        [
            "(?<![:|&])((?=[,);\\}\\]]|//)|(?==[^>])|(?=^\\s*$)|((?<=\\S)(?=\\s*$))|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "type"
        },
        {
            "include": "functionParameters"
        }
    ],
    "type": [
        {
            "include": "comment"
        },
        {
            "include": "string"
        },
        {
            "include": "numbers"
        },
        {
            "include": "type-primitive"
        },
        {
            "include": "type-tuple"
        }
    ],
    "type-primitive": [
        [
            "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(string|int|boolean|float|byte|decimal|var)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
            "support.type.primitive.ballerina"
        ]
    ],
    "type-tuple": [
        [
            "\\.\\.\\.",
            "keyword.operator.rest.ballerina"
        ],
        [
            "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?)?\\s*(:)",
            [
                "entity.name.label.ballerina",
                "keyword.operator.optional.ballerina",
                "punctuation.separator.label.ballerina"
            ]
        ],
        {
            "include": "type"
        },
        {
            "include": "punctuation-comma"
        }
    ],
    "workerBody": [
        [
            "\\{",
            {
                "next": "workerBody__b__0",
                "token": ""
            }
        ]
    ],
    "workerBody__b__0": [
        [
            "(?=\\})",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "code"
        }
    ],
    "service-decl": [
        {
            "include": "class-defn"
        },
        {
            "include": "serviceName"
        },
        {
            "include": "serviceOn"
        },
        {
            "include": "serviceBody"
        }
    ],
    "class-defn": [
        {
            "include": "keywords"
        },
        [
            "[_$[:alpha:]][_$[:alnum:]]*",
            [
                "entity.name.type.class.ballerina"
            ]
        ],
        {
            "include": "class-body"
        }
    ],
    "class-body": [
        {
            "include": "comment"
        },
        {
            "include": "mdDocumentation"
        },
        {
            "include": "function-defn"
        },
        {
            "include": "var-expr"
        },
        {
            "include": "variable-initializer"
        },
        {
            "include": "access-modifier"
        },
        {
            "include": "keywords"
        },
        [
            "(?<=:)\\s*",
            {
                "next": "class-body__b__0",
                "token": ""
            }
        ],
        {
            "include": "decl-block"
        },
        {
            "include": "expression"
        },
        {
            "include": "punctuation-comma"
        },
        {
            "include": "punctuation-semicolon"
        }
    ],
    "mdDocumentation": [
        {
            "include": "mdDocumentationReturnParamDescription"
        },
        {
            "include": "mdDocumentationParamDescription"
        }
    ],
    "mdDocumentationReturnParamDescription": [
        [
            "(#)(?: *?)(\\+)(?: *)(return)(?: *)(-)?(.*)",
            [
                {
                    "next": "mdDocumentationReturnParamDescription__b__0",
                    "token": "comment.mddocs.ballerina"
                },
                "keyword.ballerina",
                "keyword.ballerina",
                "keyword.ballerina",
                "comment.mddocs.returnparamdesc.ballerina"
            ]
        ]
    ],
    "mdDocumentationReturnParamDescription__b__0": [
        [
            "(?=[^#\\r\\n]|(?:# *?\\+))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        [
            "#.*",
            "comment.mddocs.returnparamdesc.ballerina"
        ]
    ],
    "mdDocumentationParamDescription": [
        [
            "(\\+\\s+)([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\-\\s+)",
            [
                {
                    "next": "mdDocumentationParamDescription__b__0",
                    "token": "keyword.operator.ballerina"
                },
                "variable.other.readwrite.ballerina",
                "keyword.operator.ballerina"
            ]
        ]
    ],
    "mdDocumentationParamDescription__b__0": [
        [
            "(?=[^#\\r\\n]|(?:# *?\\+))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        [
            "#.*",
            "comment.mddocs.paramdesc.ballerina"
        ]
    ],
    "var-expr": [
        [
            "(?=\\b(string|int|boolean|float|byte|decimal|var))",
            {
                "next": "var-expr__b__0",
                "token": "storage.modifier.ballerina storage.type.ballerina"
            }
        ],
        {
            "include": "punctuation-comma"
        },
        [
            "(?=\\b(const(?!\\s+enum\\b)))",
            {
                "next": "var-expr__b__1",
                "token": ""
            }
        ],
        {
            "include": "punctuation-comma"
        }
    ],
    "var-expr__b__0": [
        [
            "(?!\\b(string|int|boolean|float|byte|decimal|var))((?=;|}|;|^\\s*$|(?:^\\s*{{constructsAndModifiers}}))|((?<!^string|{{nonPropertyLookBehind}}string|^int|{{nonPropertyLookBehind}}int)(?=\\s*$)))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        [
            "\\b(string|int|boolean|float|byte|decimal|var)(?=\\s+|\\[|\\?|\\|)",
            {
                "next": "var-expr__b__0__b__0",
                "token": "support.type.primitive.ballerina"
            }
        ],
        [
            "\\|",
            "keyword.operator.type.annotation.ballerina"
        ],
        {
            "include": "stringTemplate"
        },
        {
            "include": "multiType"
        },
        {
            "include": "var-single-variable"
        },
        {
            "include": "variable-initializer"
        },
        {
            "include": "punctuation-comma"
        },
        {
            "include": "type-annotation"
        },
        {
            "include": "keywords"
        }
    ],
    "var-expr__b__0__b__0": [
        [
            "(?=\\S)",
            {
                "next": "@pop",
                "token": ""
            }
        ]
    ],
    "var-single-variable": [
        [
            "([_$[:alpha:]][_$[:alnum:]]*)\\s+(\\!)?",
            [
                {
                    "next": "var-single-variable__b__1",
                    "token": "meta.definition.variable.ballerina variable.other.readwrite.ballerina"
                },
                "keyword.operator.definiteassignment.ballerina"
            ]
        ]
    ],
    "var-single-variable__b__0": [
        [
            "(?=$|^|[;,=}])",
            {
                "next": "@pop",
                "token": "punctuation.terminator.statement.ballerina"
            }
        ],
        {
            "include": "string"
        },
        {
            "include": "keywords"
        }
    ],
    "var-single-variable__b__1": [
        [
            "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\s+))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        [
            ".",
            "meta.var-single-variable.expr.ballerina"
        ]
    ],
    "variable-initializer": [
        [
            "(?<!=|!)(=)(?!=)",
            [
                {
                    "next": "variable-initializer__b__1",
                    "token": "keyword.operator.assignment.ballerina"
                }
            ]
        ],
        [
            "(?<!=|!)(=)(?!=)(?=\\s*\\S)",
            [
                {
                    "next": "variable-initializer__b__0",
                    "token": "keyword.operator.assignment.ballerina"
                }
            ]
        ]
    ],
    "variable-initializer__b__0": [
        [
            "(?=$|[,);}\\]])",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "function-defn"
        },
        {
            "include": "expression"
        }
    ],
    "variable-initializer__b__1": [
        [
            "(?=[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\s+))|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "expression"
        }
    ],
    "var-expr__b__1": [
        [
            "(?!\\b(const(?!\\s+enum\\b)))((?=;|}|;|^\\s*$|(?:^\\s*{{constructsAndModifiers}}))|((?<!^string|{{nonPropertyLookBehind}}string|^int|{{nonPropertyLookBehind}}int)(?=\\s*$)))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        [
            "\\b(const(?!\\s+enum\\b))\\s+",
            {
                "next": "var-expr__b__1__b__0",
                "token": "keyword.other.ballerina"
            }
        ],
        {
            "include": "stringTemplate"
        },
        {
            "include": "var-single-const"
        },
        {
            "include": "variable-initializer"
        },
        {
            "include": "punctuation-comma"
        },
        {
            "include": "type-annotation"
        }
    ],
    "var-expr__b__1__b__0": [
        [
            "(?=\\S)",
            {
                "next": "@pop",
                "token": ""
            }
        ]
    ],
    "var-single-const": [
        [
            "([_$[:alpha:]][_$[:alnum:]]*)",
            [
                {
                    "next": "var-single-const__b__1",
                    "token": "meta.definition.variable.ballerina variable.other.constant.ballerina"
                }
            ]
        ],
        [
            "\\b(string|int|boolean|float|byte|decimal|var)\\s*",
            {
                "next": "var-single-const__b__0",
                "token": "support.type.primitive.ballerina"
            }
        ],
        {
            "include": "types"
        }
    ],
    "var-single-const__b__0": [
        [
            "(?=\\S)",
            {
                "next": "@pop",
                "token": ""
            }
        ]
    ],
    "var-single-const__b__1": [
        [
            "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\s+))",
            {
                "next": "@pop",
                "token": ""
            }
        ]
    ],
    "access-modifier": [
        [
            "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
            "storage.modifier.ballerina keyword.other.ballerina"
        ]
    ],
    "class-body__b__0": [
        [
            "(?=\\s|[;),}\\]:\\-\\+]|;|^\\s*$|(?:^\\s*{{constructsAndModifiers}}))",
            {
                "next": "@pop",
                "token": ""
            }
        ]
    ],
    "decl-block": [
        {
            "include": "statements"
        },
        {
            "include": "mdDocumentation"
        }
    ],
    "punctuation-semicolon": [
        [
            ";",
            "punctuation.terminator.statement.ballerina"
        ]
    ],
    "serviceName": [
        [
            "(\\/([_$[:alpha:]][_$[:alnum:]]**)|\\\"[_$[:alpha:]][_$[:alnum:]]*\\\")",
            "entity.service.path.ballerina"
        ]
    ],
    "serviceOn": [
        [
            "on",
            {
                "next": "serviceOn__b__0",
                "token": "keyword.ballerina"
            }
        ]
    ],
    "serviceOn__b__0": [
        [
            "(?={)",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "code"
        }
    ],
    "serviceBody": [
        {
            "include": "comment"
        },
        {
            "include": "mdDocumentation"
        },
        {
            "include": "documentationDef"
        },
        {
            "include": "decl-block"
        }
    ],
    "documentationDef": [
        [
            "\\b(?:documentation|deprecated)\\b",
            {
                "next": "documentationDef__b__0",
                "token": "keyword.ballerina"
            }
        ]
    ],
    "documentationDef__b__0": [
        [
            "\\}",
            {
                "next": "@pop",
                "token": "delimiter.curly"
            }
        ],
        {
            "include": "documentationBody"
        },
        {
            "include": "comment"
        }
    ],
    "documentationBody": [
        [
            "\\{",
            {
                "next": "documentationBody__b__0",
                "token": "punctuation.definition.block.ballerina.documentation"
            }
        ]
    ],
    "documentationBody__b__0": [
        [
            "(?=\\})",
            {
                "next": "@pop",
                "token": "punctuation.definition.block.ballerina.documentation"
            }
        ],
        [
            "(P|R|T|F|V)({{)(.*)(}})",
            [
                "keyword.other.ballerina.documentation",
                "keyword.other.ballerina.documentation",
                "variable.parameter.ballerina.documentation",
                "keyword.other.ballerina.documentation"
            ]
        ],
        [
            "\\```",
            {
                "next": "documentationBody__b__0__b__0",
                "token": ""
            }
        ],
        [
            "\\``",
            {
                "next": "documentationBody__b__0__b__1",
                "token": ""
            }
        ],
        [
            "\\`",
            {
                "next": "documentationBody__b__0__b__2",
                "token": ""
            }
        ],
        [
            ".",
            "comment.block.ballerina.documentation"
        ]
    ],
    "documentationBody__b__0__b__0": [
        [
            "\\```",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        [
            ".",
            "comment.block.code.ballerina.documentation"
        ]
    ],
    "documentationBody__b__0__b__1": [
        [
            "\\``",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        [
            ".",
            "comment.block.code.ballerina.documentation"
        ]
    ],
    "documentationBody__b__0__b__2": [
        [
            "\\`",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        [
            ".",
            "comment.block.code.ballerina.documentation"
        ]
    ],
    "objectDec": [
        [
            "\\bobject\\b(?!:)",
            {
                "next": "objectDec__b__0",
                "token": "keyword.ballerina"
            }
        ]
    ],
    "objectDec__b__0": [
        [
            "\\}",
            {
                "next": "@pop",
                "token": "delimiter.curly"
            }
        ],
        {
            "include": "comment"
        }
    ],
    "forkStatement": [
        [
            "\\bfork\\b",
            {
                "next": "forkStatement__b__0",
                "token": "keyword.control.ballerina"
            }
        ]
    ],
    "forkStatement__b__0": [
        [
            "\\}",
            {
                "next": "@pop",
                "token": "punctuation.definition.block.ballerina"
            }
        ],
        {
            "include": "forkBody"
        }
    ],
    "forkBody": [
        [
            "\\{",
            {
                "next": "forkBody__b__0",
                "token": "punctuation.definition.block.ballerina"
            }
        ]
    ],
    "forkBody__b__0": [
        [
            "(?=\\})",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "workerDef"
        }
    ],
    "butExp": [
        [
            "\\bbut\\b",
            {
                "next": "butExp__b__0",
                "token": "keyword.ballerina"
            }
        ]
    ],
    "butExp__b__0": [
        [
            "\\}",
            {
                "next": "@pop",
                "token": "punctuation.definition.block.ballerina.documentation"
            }
        ],
        {
            "include": "butExpBody"
        },
        {
            "include": "comment"
        }
    ],
    "butExpBody": [
        [
            "\\{",
            {
                "next": "butExpBody__b__0",
                "token": "punctuation.definition.block.ballerina.documentation"
            }
        ]
    ],
    "butExpBody__b__0": [
        [
            "(?=\\})",
            {
                "next": "@pop",
                "token": "punctuation.definition.block.ballerina.documentation"
            }
        ],
        {
            "include": "parameter"
        },
        {
            "include": "butClause"
        },
        {
            "include": "comment"
        }
    ],
    "parameter": [
        [
            "((?=record|object|function)|([_$[:alpha:]][_$[:alnum:]]*)(?=\\|)|(?:[_$[:alpha:]][_$[:alnum:]]*))",
            {
                "next": "parameter__b__0",
                "token": "type"
            }
        ]
    ],
    "parameter__b__0": [
        [
            "(?:\\,)|(?:\\|)|(?:\\:)|(?==>)|(?=\\))|(?=\\])",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "parameterWithDescriptor"
        },
        {
            "include": "record"
        },
        {
            "include": "objectDec"
        },
        {
            "include": "functionType"
        },
        {
            "include": "constrainType"
        },
        {
            "include": "defaultValue"
        },
        {
            "include": "comment"
        },
        {
            "include": "parameterTuple"
        },
        [
            "[_$[:alpha:]][_$[:alnum:]]*",
            "variable.parameter.ballerina"
        ]
    ],
    "parameterWithDescriptor": [
        [
            "\\&",
            {
                "next": "parameterWithDescriptor__b__0",
                "token": "keyword.operator.ballerina"
            }
        ]
    ],
    "parameterWithDescriptor__b__0": [
        [
            "(?=\\,)|(?=\\|)|(?=\\))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "parameter"
        }
    ],
    "record": [
        {
            "include": "statements"
        }
    ],
    "functionType": [
        [
            "\\bfunction\\b",
            {
                "next": "functionType__b__0",
                "token": "keyword.ballerina"
            }
        ]
    ],
    "functionType__b__0": [
        [
            "(?=\\,)|(?=\\|)|(?=\\:)|(?==>)|(?=\\))|(?=\\])",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "comment"
        },
        {
            "include": "functionTypeParamList"
        },
        {
            "include": "functionTypeReturns"
        }
    ],
    "functionTypeParamList": [
        [
            "\\(",
            {
                "next": "functionTypeParamList__b__0",
                "token": "delimiter.parenthesis"
            }
        ]
    ],
    "functionTypeParamList__b__0": [
        [
            "\\)",
            {
                "next": "@pop",
                "token": "delimiter.parenthesis"
            }
        ],
        [
            "public",
            "keyword"
        ],
        {
            "include": "annotationAttachment"
        },
        {
            "include": "recordLiteral"
        },
        {
            "include": "record"
        },
        {
            "include": "objectDec"
        },
        {
            "include": "functionType"
        },
        {
            "include": "constrainType"
        },
        {
            "include": "parameterTuple"
        },
        {
            "include": "functionTypeType"
        },
        {
            "include": "comment"
        }
    ],
    "constrainType": [
        [
            "<",
            {
                "next": "constrainType__b__0",
                "token": "punctuation.definition.parameters.begin.ballerina"
            }
        ]
    ],
    "constrainType__b__0": [
        [
            ">",
            {
                "next": "@pop",
                "token": "punctuation.definition.parameters.end.ballerina"
            }
        ],
        {
            "include": "comment"
        },
        {
            "include": "constrainType"
        },
        [
            "\\b([_$[:alpha:]][_$[:alnum:]]*)\\b",
            "type"
        ]
    ],
    "parameterTuple": [
        [
            "\\[",
            {
                "next": "parameterTuple__b__0",
                "token": ""
            }
        ]
    ],
    "parameterTuple__b__0": [
        [
            "(?=\\,)|(?=\\|)|(?=\\:)|(?==>)|(?=\\))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "record"
        },
        {
            "include": "objectDec"
        },
        {
            "include": "parameterTupleType"
        },
        {
            "include": "parameterTupleEnd"
        },
        {
            "include": "comment"
        }
    ],
    "parameterTupleType": [
        [
            "[_$[:alpha:]][_$[:alnum:]]*",
            {
                "next": "parameterTupleType__b__0",
                "token": "type"
            }
        ]
    ],
    "parameterTupleType__b__0": [
        [
            "(?:\\,)|(?:\\|)|(?=\\])",
            {
                "next": "@pop",
                "token": ""
            }
        ]
    ],
    "parameterTupleEnd": [
        [
            "\\]",
            {
                "next": "parameterTupleEnd__b__0",
                "token": ""
            }
        ]
    ],
    "parameterTupleEnd__b__0": [
        [
            "(?=\\,)|(?=\\|)|(?=\\:)|(?==>)|(?=\\))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "defaultWithParentheses"
        },
        [
            "[_$[:alpha:]][_$[:alnum:]]*",
            "default.variable.parameter.ballerina"
        ]
    ],
    "defaultWithParentheses": [
        [
            "\\(",
            {
                "next": "defaultWithParentheses__b__0",
                "token": "punctuation.definition.block.ballerina"
            }
        ]
    ],
    "defaultWithParentheses__b__0": [
        [
            "\\)",
            {
                "next": "@pop",
                "token": "punctuation.definition.block.ballerina"
            }
        ]
    ],
    "functionTypeType": [
        [
            "[_$[:alpha:]][_$[:alnum:]]*",
            {
                "next": "functionTypeType__b__0",
                "token": "type"
            }
        ]
    ],
    "functionTypeType__b__0": [
        [
            "(?=\\,)|(?:\\|)|(?=\\])|(?=\\))",
            {
                "next": "@pop",
                "token": ""
            }
        ]
    ],
    "functionTypeReturns": [
        [
            "\\breturns\\b",
            {
                "next": "functionTypeReturns__b__0",
                "token": "keyword"
            }
        ]
    ],
    "functionTypeReturns__b__0": [
        [
            "(?=\\,)|(?:\\|)|(?=\\])|(?=\\))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "functionTypeReturnsParameter"
        },
        {
            "include": "comment"
        }
    ],
    "functionTypeReturnsParameter": [
        [
            "((?=record|object|function)|(?:[_$[:alpha:]][_$[:alnum:]]*))",
            {
                "next": "functionTypeReturnsParameter__b__0",
                "token": "type"
            }
        ]
    ],
    "functionTypeReturnsParameter__b__0": [
        [
            "(?=\\,)|(?:\\|)|(?:\\:)|(?==>)|(?=\\))|(?=\\])",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "record"
        },
        {
            "include": "objectDec"
        },
        {
            "include": "functionType"
        },
        {
            "include": "constrainType"
        },
        {
            "include": "defaultValue"
        },
        {
            "include": "comment"
        },
        {
            "include": "parameterTuple"
        },
        [
            "[_$[:alpha:]][_$[:alnum:]]*",
            "default.variable.parameter.ballerina"
        ]
    ],
    "defaultValue": [
        [
            "[=:]",
            {
                "next": "defaultValue__b__0",
                "token": "keyword.operator.ballerina"
            }
        ]
    ],
    "defaultValue__b__0": [
        [
            "(?=[,)])",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "code"
        }
    ],
    "butClause": [
        [
            "=>",
            {
                "next": "butClause__b__0",
                "token": "keyword.operator.ballerina"
            }
        ]
    ],
    "butClause__b__0": [
        [
            ",|(?=\\})",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "code"
        }
    ],
    "xml": [
        [
            "(\\bxml)(\\s*)(`)",
            [
                {
                    "next": "xml__b__0",
                    "token": "keyword.ballerina"
                },
                "",
                "string.template.ballerina"
            ]
        ]
    ],
    "xml__b__0": [
        [
            "`",
            {
                "next": "@pop",
                "token": "string.template.ballerina"
            }
        ],
        {
            "include": "xmlTag"
        },
        {
            "include": "xmlComment"
        },
        {
            "include": "templateVariable"
        },
        [
            ".",
            "string"
        ]
    ],
    "xmlTag": [
        [
            "(<\\/?\\??)\\s*([-_a-zA-Z0-9]+)",
            [
                {
                    "next": "xmlTag__b__0",
                    "token": "tag"
                },
                "tag"
            ]
        ]
    ],
    "xmlTag__b__0": [
        [
            "\\??\\/?>",
            {
                "next": "@pop",
                "token": "tag"
            }
        ],
        {
            "include": "xmlSingleQuotedString"
        },
        {
            "include": "xmlDoubleQuotedString"
        },
        [
            "([a-zA-Z0-9-]+)",
            "variable.parameter"
        ]
    ],
    "xmlSingleQuotedString": [
        [
            "\\'",
            {
                "next": "xmlSingleQuotedString__b__0",
                "token": "string.begin.ballerina"
            }
        ]
    ],
    "xmlSingleQuotedString__b__0": [
        [
            "\\'",
            {
                "next": "@pop",
                "token": "string.end.ballerina"
            }
        ],
        [
            "\\\\.",
            "constant.character.escape.ballerina"
        ],
        [
            ".",
            "string"
        ]
    ],
    "xmlDoubleQuotedString": [
        [
            "\\\"",
            {
                "next": "xmlDoubleQuotedString__b__0",
                "token": "string.begin.ballerina"
            }
        ]
    ],
    "xmlDoubleQuotedString__b__0": [
        [
            "\\\"",
            {
                "next": "@pop",
                "token": "string.end.ballerina"
            }
        ],
        [
            "\\\\.",
            "constant.character.escape.ballerina"
        ],
        [
            ".",
            "string"
        ]
    ],
    "xmlComment": [
        [
            "<!--",
            {
                "next": "xmlComment__b__0",
                "token": "comment.block.xml.ballerina"
            }
        ]
    ],
    "xmlComment__b__0": [
        [
            "-->",
            {
                "next": "@pop",
                "token": "comment.block.xml.ballerina"
            }
        ],
        [
            ".",
            "comment.block.xml.ballerina"
        ]
    ],
    "templateVariable": [
        [
            "\\${",
            {
                "next": "templateVariable__b__0",
                "token": "constant.character.escape.ballerina"
            }
        ]
    ],
    "templateVariable__b__0": [
        [
            "}",
            {
                "next": "@pop",
                "token": "constant.character.escape.ballerina"
            }
        ],
        {
            "include": "code"
        }
    ],
    "paranthesised": [
        {
            "include": "decl-block"
        },
        {
            "include": "comment"
        },
        {
            "include": "string"
        },
        {
            "include": "annotationAttachment"
        },
        {
            "include": "recordLiteral"
        },
        {
            "include": "stringTemplate"
        },
        {
            "include": "parameter-name"
        },
        {
            "include": "variable-initializer"
        },
        [
            "\\,",
            "punctuation.separator.parameter.ballerina"
        ],
        {
            "include": "expression"
        }
    ],
    "parameter-name": [
        [
            "\\s*\\b(string|int|boolean|float|byte|decimal|var)\\s+",
            [
                "support.type.primitive.ballerina"
            ]
        ],
        [
            "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|(string|int|boolean|float|byte|decimal|var)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)",
            [
                "keyword.operator.rest.ballerina",
                "support.type.primitive.ballerina",
                "variable.parameter.ballerina",
                "variable.parameter.ballerina",
                "keyword.operator.optional.ballerina"
            ]
        ]
    ],
    "paranthesisedBracket": [
        [
            "\\[",
            {
                "next": "paranthesisedBracket__b__0",
                "token": ""
            }
        ]
    ],
    "paranthesisedBracket__b__0": [
        [
            "\\]",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "comment"
        },
        {
            "include": "code"
        }
    ],
    "function-body": [
        [
            "\\=>",
            {
                "next": "function-body__b__0",
                "token": "meta.arrow.ballerina storage.type.function.arrow.ballerina"
            }
        ],
        {
            "include": "comment"
        },
        {
            "include": "functionParameters"
        },
        {
            "include": "decl-block"
        },
        [
            "\\*",
            "keyword.generator.asterisk.ballerina"
        ]
    ],
    "function-body__b__0": [
        [
            "\\;",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "statements"
        }
    ],
    "object-member__b__0": [
        [
            "(?=:)|((?<=[\\]])(?=\\s*[\\(\\<]))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "comment"
        }
    ],
    "object-member__b__1": [
        [
            "(?=:)|((?<=[\\'\\\"\\`])(?=((\\s*[\\(\\<,}])|(\\n*})|(\\s+(as)\\s+))))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "comment"
        },
        {
            "include": "string"
        }
    ],
    "object-member__b__2": [
        [
            "(?=:)|(?=\\s*([\\(\\<,}])|(\\s+as\\s+))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "comment"
        },
        {
            "include": "numbers"
        }
    ],
    "object-member__b__3": [
        [
            "(?=\\}|;|,)|(?<=\\})",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "function-body"
        }
    ],
    "object-member__b__4": [
        [
            "(?=,|\\})",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "expression"
        }
    ],
    "object-member__b__5": [
        [
            "(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|^|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        [
            ".",
            "meta.object.member.ballerina"
        ]
    ],
    "object-member__b__6": [
        [
            "(?=,|\\}|$|\\/\\/|\\/\\*)",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "expression"
        }
    ],
    "ternary-expression": [
        {
            "include": "expression"
        }
    ],
    "expression-operators": [
        [
            "\\*=|(?<!\\()/=|%=|\\+=|\\-=",
            "keyword.operator.assignment.compound.ballerina"
        ],
        [
            "\\&=|\\^=|<<=|>>=|>>>=|\\|=",
            "keyword.operator.assignment.compound.bitwise.ballerina"
        ],
        [
            "<<|>>>|>>",
            "keyword.operator.bitwise.shift.ballerina"
        ],
        [
            "===|!==|==|!=",
            "keyword.operator.comparison.ballerina"
        ],
        [
            "<=|>=|<>|<|>",
            "keyword.operator.relational.ballerina"
        ],
        [
            "(?<=[_$[:alnum:]])(\\!)\\s*(?:(/=)|(?:(/)(?![/*])))",
            [
                "keyword.operator.logical.ballerina",
                "keyword.operator.assignment.compound.ballerina",
                "keyword.operator.arithmetic.ballerina"
            ]
        ],
        [
            "\\!|&&|\\|\\||\\?\\?",
            "keyword.operator.logical.ballerina"
        ],
        [
            "\\&|~|\\^|\\|",
            "keyword.operator.bitwise.ballerina"
        ],
        [
            "\\=",
            "keyword.operator.assignment.ballerina"
        ],
        [
            "--",
            "keyword.operator.decrement.ballerina"
        ],
        [
            "\\+\\+",
            "keyword.operator.increment.ballerina"
        ],
        [
            "%|\\*|/|-|\\+",
            "keyword.operator.arithmetic.ballerina"
        ]
    ],
    "identifiers": [
        [
            "(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*={{functionOrArrowLookup}})",
            [
                "punctuation.accessor.ballerina",
                "punctuation.accessor.optional.ballerina",
                "entity.name.function.ballerina"
            ]
        ],
        [
            "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)",
            [
                "punctuation.accessor.ballerina",
                "punctuation.accessor.optional.ballerina",
                "variable.other.property.ballerina"
            ]
        ],
        [
            "[_$[:alpha:]][_$[:alnum:]]*",
            "variable.other.readwrite.ballerina"
        ],
        [
            "\\:",
            "keyword.operator.type.annotation.ballerina"
        ]
    ],
    "declaration": [
        {
            "include": "import-declaration"
        },
        {
            "include": "var-expr"
        },
        {
            "include": "typeDefinition"
        },
        {
            "include": "function-defn"
        },
        {
            "include": "service-decl"
        },
        {
            "include": "class-defn"
        },
        {
            "include": "enum-decl"
        },
        {
            "include": "keywords"
        }
    ],
    "import-declaration": [
        {
            "include": "keywords"
        },
        {
            "include": "comment"
        },
        {
            "include": "import-clause"
        }
    ],
    "import-clause": [
        {
            "include": "comment"
        },
        [
            "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bdefault)|(\\*)|(\\b[_$[:alpha:]][_$[:alnum:]]*))",
            [
                "keyword.control.default.ballerina",
                "variable.other.readwrite.ballerina meta.import.module.ballerina",
                "keyword.control.default.ballerina",
                "variable.other.readwrite.alias.ballerina"
            ]
        ],
        [
            "([_$[:alpha:]][_$[:alnum:]]*)",
            "variable.other.readwrite.alias.ballerina"
        ]
    ],
    "typeDefinition": [
        [
            "(\\btype\\b)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
            [
                {
                    "next": "typeDefinition__b__0",
                    "token": "keyword.other.ballerina"
                },
                "entity.name.type.ballerina"
            ]
        ]
    ],
    "typeDefinition__b__0": [
        [
            "\\;",
            {
                "next": "@pop",
                "token": "punctuation.terminator.statement.ballerina"
            }
        ],
        {
            "include": "comment"
        },
        {
            "include": "type-primitive"
        },
        {
            "include": "string"
        },
        {
            "include": "booleans"
        },
        {
            "include": "typeDescription"
        }
    ],
    "typeDescription": [
        [
            "[_$[:alpha:]][_$[:alnum:]]*",
            {
                "next": "typeDescription__b__0",
                "token": "entity.name.function.ballerina"
            }
        ]
    ],
    "typeDescription__b__0": [
        [
            "(?=;)",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "decl-block"
        },
        {
            "include": "type-primitive"
        },
        [
            "[_$[:alpha:]][_$[:alnum:]]*",
            "type"
        ]
    ],
    "enum-decl": [
        [
            "\\{",
            {
                "next": "enum-decl__b__0",
                "token": "punctuation.definition.block.ballerina"
            }
        ],
        {
            "include": "comment"
        },
        {
            "include": "mdDocumentation"
        }
    ],
    "enum-decl__b__0": [
        [
            "\\}",
            {
                "next": "@pop",
                "token": "punctuation.definition.block.ballerina"
            }
        ],
        [
            "([_$[:alpha:]][_$[:alnum:]]*)",
            {
                "next": "enum-decl__b__0__b__0",
                "token": "variable.other.enummember.ballerina"
            }
        ],
        {
            "include": "comment"
        },
        {
            "include": "mdDocumentation"
        },
        [
            "(?=({{nonIdentifierPropertyName}}))",
            {
                "next": "enum-decl__b__0__b__1",
                "token": ""
            }
        ],
        {
            "include": "punctuation-comma"
        }
    ],
    "enum-decl__b__0__b__0": [
        [
            "(?=,|\\}|$)",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "comment"
        },
        {
            "include": "variable-initializer"
        }
    ],
    "enum-decl__b__0__b__1": [
        [
            "(?=,|\\}|$)",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "string"
        },
        {
            "include": "array-literal"
        },
        {
            "include": "comment"
        },
        {
            "include": "variable-initializer"
        }
    ],
    "control-statement": [
        [
            "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(return)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
            {
                "next": "control-statement__b__0",
                "token": "keyword.control.flow.ballerina"
            }
        ],
        {
            "include": "if-statement"
        },
        [
            "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(else|if)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
            "keyword.control.conditional.ballerina"
        ]
    ],
    "control-statement__b__0": [
        [
            "(?=[;}]|$|;|^\\s*$|(?:^\\s*{{constructsAndModifiers}}))",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        {
            "include": "expression"
        }
    ],
    "if-statement": [
        [
            "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bif\\b\\s*(?!\\{))",
            {
                "next": "if-statement__b__0",
                "token": ""
            }
        ]
    ],
    "if-statement__b__0": [
        [
            "(?<=\\})",
            {
                "next": "@pop",
                "token": ""
            }
        ],
        [
            "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(if)\\s*(\\()?",
            [
                {
                    "next": "if-statement__b__0__b__0",
                    "token": "keyword.control.conditional.ballerina"
                },
                "meta.brace.round.ballerina"
            ]
        ],
        {
            "include": "comment"
        },
        {
            "include": "decl-block"
        }
    ],
    "if-statement__b__0__b__0": [
        [
            "(\\))|(\\s(?=\\S)(?=\\s*{))",
            {
                "next": "@pop",
                "token": "meta.brace.round.ballerina"
            }
        ],
        {
            "include": "type-primitive"
        },
        {
            "include": "expression"
        }
    ]
}